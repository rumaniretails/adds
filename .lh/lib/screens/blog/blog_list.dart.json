{
    "sourceFile": "lib/screens/blog/blog_list.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1746442768855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746442775926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,36 +11,10 @@\n class BlogsviewAll extends StatelessWidget {\r\n   final List<BlogItem> items;\r\n \r\n   const BlogsviewAll({super.key, required this.items});\r\n-@override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initAd();\r\n-  }\r\n \r\n-  void _initAd() {\r\n-    _bannerAd = BannerAd(\r\n-      adUnitId:\r\n-          'ca-app-pub-3940256099942544/6300978111', \r\n-      request: AdRequest(),\r\n-      size: AdSize.banner,\r\n-      listener: BannerAdListener(\r\n-        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n-        onAdFailedToLoad: (ad, error) {\r\n-          ad.dispose();\r\n-          log('Ad failed to load: ${error.message}');\r\n-        },\r\n-      ),\r\n-    )..load();\r\n-  }\r\n-\r\n   @override\r\n-  void dispose() {\r\n-    _bannerAd?.dispose();\r\n-    super.dispose();\r\n-  }\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n     final BlogController blogsController = Get.find<BlogController>();\r\n     return AppScaffold(\r\n       appBarTitle: Text(\r\n"
                },
                {
                    "date": 1746442786932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/widgets.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:nb_utils/nb_utils.dart';\r\n+import 'package:templering/utils/appscaffold.dart';\r\n+import '../../../utils/color.dart';\r\n+import 'blog_model.dart';\r\n+import 'blogs_controller.dart';\r\n+import 'blogs_detail_screen.dart';\r\n+\r\n+class BlogsviewAll extends StatefulWidget {\r\n+  final List<BlogItem> items;\r\n+\r\n+  const BlogsviewAll({super.key, required this.items});\r\n+\r\n+  @override\r\n+  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n+}\r\n+\r\n+class _BlogsviewAllState extends State<BlogsviewAll> {\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initAd();\r\n+  }\r\n+\r\n+  void _initAd() {\r\n+    _bannerAd = BannerAd(\r\n+      adUnitId:\r\n+          'ca-app-pub-3940256099942544/6300978111', \r\n+      request: AdRequest(),\r\n+      size: AdSize.banner,\r\n+      listener: BannerAdListener(\r\n+        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n+        onAdFailedToLoad: (ad, error) {\r\n+          ad.dispose();\r\n+          log('Ad failed to load: ${error.message}');\r\n+        },\r\n+      ),\r\n+    )..load();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _bannerAd?.dispose();\r\n+    super.dispose();\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final BlogController blogsController = Get.find<BlogController>();\r\n+    return AppScaffold(\r\n+      appBarTitle: Text(\r\n+        \"Blogs\",\r\n+        style:\r\n+            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n+      ),\r\n+      body: ListView.builder(\r\n+        itemCount: blogsController.items.length,\r\n+        itemBuilder: (context, index) {\r\n+          return Obx(() {\r\n+            final item = blogsController.items[index];\r\n+            return Padding(\r\n+              padding:\r\n+                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+              child: Row(\r\n+                children: [\r\n+                  InkWell(\r\n+                    onTap: () {\r\n+                      Get.to(\r\n+                        () => BlogDetailScreen(\r\n+                          subtitle: item.subtitle,\r\n+                          time: item.time,\r\n+                          image: item.image,\r\n+                          paragraph: item.paragraph,\r\n+                        ),\r\n+                      );\r\n+                    },\r\n+                    child: Row(\r\n+                      children: [\r\n+                        Container(\r\n+                          height:\r\n+                              MediaQuery.of(context).size.height * 0.12, //100,\r\n+                          width:\r\n+                              MediaQuery.of(context).size.width * 0.92, //428,\r\n+                          decoration: BoxDecoration(\r\n+                            color: context.cardColor,\r\n+                            borderRadius: BorderRadius.circular(15),\r\n+                          ),\r\n+                          child: Row(\r\n+                            children: [\r\n+                              Hero(\r\n+                                tag: item.image ??\r\n+                                    \"\", // Use null-aware operator to handle null image\r\n+                                child: SizedBox(\r\n+                                  width: 100,\r\n+                                  height: 100,\r\n+                                  child: Image.network(\r\n+                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                        \"\", // Fallback to empty string if image is null\r\n+                                    fit: BoxFit.cover,\r\n+                                    loadingBuilder:\r\n+                                        (context, child, loadingProgress) {\r\n+                                      if (loadingProgress == null) {\r\n+                                        return child; // Show the image once it has loaded\r\n+                                      } else {\r\n+                                        return Center(\r\n+                                          // Display a loading indicator while the image loads\r\n+                                          child: CircularProgressIndicator(\r\n+                                            value: loadingProgress\r\n+                                                        .expectedTotalBytes !=\r\n+                                                    null\r\n+                                                ? loadingProgress\r\n+                                                        .cumulativeBytesLoaded /\r\n+                                                    (loadingProgress\r\n+                                                            .expectedTotalBytes ??\r\n+                                                        1)\r\n+                                                : null,\r\n+                                          ),\r\n+                                        );\r\n+                                      }\r\n+                                    },\r\n+                                    errorBuilder: (context, error, stackTrace) {\r\n+                                      return const Center(\r\n+                                        // Display an error icon or fallback widget in case of failure\r\n+                                        child: Icon(\r\n+                                          Icons.error,\r\n+                                          color: Colors.red,\r\n+                                          size: 40,\r\n+                                        ),\r\n+                                      );\r\n+                                    },\r\n+                                  ),\r\n+                                ).paddingOnly(bottom: 10),\r\n+                              ),\r\n+                              Expanded(\r\n+                                child: Container(\r\n+                                  width:\r\n+                                      MediaQuery.of(context).size.width * 0.6,\r\n+                                  decoration: const BoxDecoration(\r\n+                                    borderRadius: BorderRadius.only(\r\n+                                      topRight: Radius.circular(15),\r\n+                                      bottomRight: Radius.circular(15),\r\n+                                    ),\r\n+                                  ),\r\n+                                  child: Column(\r\n+                                    crossAxisAlignment:\r\n+                                        CrossAxisAlignment.start,\r\n+                                    children: [\r\n+                                      Text(\r\n+                                        item.title ?? \"\",\r\n+                                        style: const TextStyle(\r\n+                                          fontSize: 13,\r\n+                                          color: adoptifyPrimaryColor,\r\n+                                          fontWeight: FontWeight.bold,\r\n+                                          fontStyle: FontStyle.italic,\r\n+                                        ),\r\n+                                      ),\r\n+                                      LimitedBox(\r\n+                                        maxWidth:\r\n+                                            MediaQuery.of(context).size.width *\r\n+                                                0.3,\r\n+                                        child: Text(\r\n+                                          item.subtitle ?? \"\",\r\n+                                          maxLines: 2,\r\n+                                          style: const TextStyle(\r\n+                                              color: Colors.grey,\r\n+                                              fontWeight: FontWeight.bold,\r\n+                                              fontSize: 13),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ).paddingAll(\r\n+                                    MediaQuery.of(context).size.height * 0.005,\r\n+                                  ),\r\n+                                ).paddingOnly(\r\n+                                    left: MediaQuery.of(context).size.width *\r\n+                                        0.02),\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            );\r\n+          });\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746442804293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/widgets.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:nb_utils/nb_utils.dart';\r\n+import 'package:templering/utils/appscaffold.dart';\r\n+import '../../../utils/color.dart';\r\n+import 'blog_model.dart';\r\n+import 'blogs_controller.dart';\r\n+import 'blogs_detail_screen.dart';\r\n+\r\n+class BlogsviewAll extends StatefulWidget {\r\n+  final List<BlogItem> items;\r\n+\r\n+  const BlogsviewAll({super.key, required this.items});\r\n+\r\n+  @override\r\n+  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n+}\r\n+\r\n+class _BlogsviewAllState extends State<BlogsviewAll> {\r\n+    BannerAd? _bannerAd;\r\n+  bool _isAdLoaded = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initAd();\r\n+  }\r\n+\r\n+  void _initAd() {\r\n+    _bannerAd = BannerAd(\r\n+      adUnitId:\r\n+          'ca-app-pub-3940256099942544/6300978111', \r\n+      request: AdRequest(),\r\n+      size: AdSize.banner,\r\n+      listener: BannerAdListener(\r\n+        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n+        onAdFailedToLoad: (ad, error) {\r\n+          ad.dispose();\r\n+          log('Ad failed to load: ${error.message}');\r\n+        },\r\n+      ),\r\n+    )..load();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _bannerAd?.dispose();\r\n+    super.dispose();\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final BlogController blogsController = Get.find<BlogController>();\r\n+    return AppScaffold(\r\n+      appBarTitle: Text(\r\n+        \"Blogs\",\r\n+        style:\r\n+            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n+      ),\r\n+      body: ListView.builder(\r\n+        itemCount: blogsController.items.length,\r\n+        itemBuilder: (context, index) {\r\n+          return Obx(() {\r\n+            final item = blogsController.items[index];\r\n+            return Padding(\r\n+              padding:\r\n+                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+              child: Row(\r\n+                children: [\r\n+                  InkWell(\r\n+                    onTap: () {\r\n+                      Get.to(\r\n+                        () => BlogDetailScreen(\r\n+                          subtitle: item.subtitle,\r\n+                          time: item.time,\r\n+                          image: item.image,\r\n+                          paragraph: item.paragraph,\r\n+                        ),\r\n+                      );\r\n+                    },\r\n+                    child: Row(\r\n+                      children: [\r\n+                        Container(\r\n+                          height:\r\n+                              MediaQuery.of(context).size.height * 0.12, //100,\r\n+                          width:\r\n+                              MediaQuery.of(context).size.width * 0.92, //428,\r\n+                          decoration: BoxDecoration(\r\n+                            color: context.cardColor,\r\n+                            borderRadius: BorderRadius.circular(15),\r\n+                          ),\r\n+                          child: Row(\r\n+                            children: [\r\n+                              Hero(\r\n+                                tag: item.image ??\r\n+                                    \"\", // Use null-aware operator to handle null image\r\n+                                child: SizedBox(\r\n+                                  width: 100,\r\n+                                  height: 100,\r\n+                                  child: Image.network(\r\n+                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                        \"\", // Fallback to empty string if image is null\r\n+                                    fit: BoxFit.cover,\r\n+                                    loadingBuilder:\r\n+                                        (context, child, loadingProgress) {\r\n+                                      if (loadingProgress == null) {\r\n+                                        return child; // Show the image once it has loaded\r\n+                                      } else {\r\n+                                        return Center(\r\n+                                          // Display a loading indicator while the image loads\r\n+                                          child: CircularProgressIndicator(\r\n+                                            value: loadingProgress\r\n+                                                        .expectedTotalBytes !=\r\n+                                                    null\r\n+                                                ? loadingProgress\r\n+                                                        .cumulativeBytesLoaded /\r\n+                                                    (loadingProgress\r\n+                                                            .expectedTotalBytes ??\r\n+                                                        1)\r\n+                                                : null,\r\n+                                          ),\r\n+                                        );\r\n+                                      }\r\n+                                    },\r\n+                                    errorBuilder: (context, error, stackTrace) {\r\n+                                      return const Center(\r\n+                                        // Display an error icon or fallback widget in case of failure\r\n+                                        child: Icon(\r\n+                                          Icons.error,\r\n+                                          color: Colors.red,\r\n+                                          size: 40,\r\n+                                        ),\r\n+                                      );\r\n+                                    },\r\n+                                  ),\r\n+                                ).paddingOnly(bottom: 10),\r\n+                              ),\r\n+                              Expanded(\r\n+                                child: Container(\r\n+                                  width:\r\n+                                      MediaQuery.of(context).size.width * 0.6,\r\n+                                  decoration: const BoxDecoration(\r\n+                                    borderRadius: BorderRadius.only(\r\n+                                      topRight: Radius.circular(15),\r\n+                                      bottomRight: Radius.circular(15),\r\n+                                    ),\r\n+                                  ),\r\n+                                  child: Column(\r\n+                                    crossAxisAlignment:\r\n+                                        CrossAxisAlignment.start,\r\n+                                    children: [\r\n+                                      Text(\r\n+                                        item.title ?? \"\",\r\n+                                        style: const TextStyle(\r\n+                                          fontSize: 13,\r\n+                                          color: adoptifyPrimaryColor,\r\n+                                          fontWeight: FontWeight.bold,\r\n+                                          fontStyle: FontStyle.italic,\r\n+                                        ),\r\n+                                      ),\r\n+                                      LimitedBox(\r\n+                                        maxWidth:\r\n+                                            MediaQuery.of(context).size.width *\r\n+                                                0.3,\r\n+                                        child: Text(\r\n+                                          item.subtitle ?? \"\",\r\n+                                          maxLines: 2,\r\n+                                          style: const TextStyle(\r\n+                                              color: Colors.grey,\r\n+                                              fontWeight: FontWeight.bold,\r\n+                                              fontSize: 13),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ).paddingAll(\r\n+                                    MediaQuery.of(context).size.height * 0.005,\r\n+                                  ),\r\n+                                ).paddingOnly(\r\n+                                    left: MediaQuery.of(context).size.width *\r\n+                                        0.02),\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            );\r\n+          });\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746442870917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/widgets.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:nb_utils/nb_utils.dart';\r\n+import 'package:templering/utils/appscaffold.dart';\r\n+import '../../../utils/color.dart';\r\n+import 'blog_model.dart';\r\n+import 'blogs_controller.dart';\r\n+import 'blogs_detail_screen.dart';\r\n+\r\n+class BlogsviewAll extends StatefulWidget {\r\n+  final List<BlogItem> items;\r\n+\r\n+  const BlogsviewAll({super.key, required this.items});\r\n+\r\n+  @override\r\n+  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n+}\r\n+\r\n+class _BlogsviewAllState extends State<BlogsviewAll> {\r\n+    BannerAd? _bannerAd;\r\n+  bool _isAdLoaded = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initAd();\r\n+  }\r\n+\r\n+  void _initAd() {\r\n+    _bannerAd = BannerAd(\r\n+      adUnitId:\r\n+          'ca-app-pub-3940256099942544/6300978111', \r\n+      request: AdRequest(),\r\n+      size: AdSize.banner,\r\n+      listener: BannerAdListener(\r\n+        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n+        onAdFailedToLoad: (ad, error) {\r\n+          ad.dispose();\r\n+          log('Ad failed to load: ${error.message}');\r\n+        },\r\n+      ),\r\n+    )..load();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _bannerAd?.dispose();\r\n+    super.dispose();\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final BlogController blogsController = Get.find<BlogController>();\r\n+    return AppScaffold(\r\n+      appBarTitle: Text(\r\n+        \"Blogs\",\r\n+        style:\r\n+            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n+      ),\r\n+      body: ListView.builder(\r\n+        itemCount: blogsController.items.length,\r\n+        itemBuilder: (context, index) {\r\n+          return Obx(() {\r\n+            final item = blogsController.items[index];\r\n+            return Padding(\r\n+              padding:\r\n+                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+              child: Row(\r\n+                children: [\r\n+                  InkWell(\r\n+                    onTap: () {\r\n+                      Get.to(\r\n+                        () => BlogDetailScreen(\r\n+                          subtitle: item.subtitle,\r\n+                          time: item.time,\r\n+                          image: item.image,\r\n+                          paragraph: item.paragraph,\r\n+                        ),\r\n+                      );\r\n+                    },\r\n+                    child: Row(\r\n+                      children: [\r\n+                        Container(\r\n+                          height:\r\n+                              MediaQuery.of(context).size.height * 0.12, //100,\r\n+                          width:\r\n+                              MediaQuery.of(context).size.width * 0.92, //428,\r\n+                          decoration: BoxDecoration(\r\n+                            color: context.cardColor,\r\n+                            borderRadius: BorderRadius.circular(15),\r\n+                          ),\r\n+                          child: Row(\r\n+                            children: [\r\n+                              Hero(\r\n+                                tag: item.image ??\r\n+                                    \"\", // Use null-aware operator to handle null image\r\n+                                child: SizedBox(\r\n+                                  width: 100,\r\n+                                  height: 100,\r\n+                                  child: Image.network(\r\n+                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                        \"\", // Fallback to empty string if image is null\r\n+                                    fit: BoxFit.cover,\r\n+                                    loadingBuilder:\r\n+                                        (context, child, loadingProgress) {\r\n+                                      if (loadingProgress == null) {\r\n+                                        return child; // Show the image once it has loaded\r\n+                                      } else {\r\n+                                        return Center(\r\n+                                          // Display a loading indicator while the image loads\r\n+                                          child: CircularProgressIndicator(\r\n+                                            value: loadingProgress\r\n+                                                        .expectedTotalBytes !=\r\n+                                                    null\r\n+                                                ? loadingProgress\r\n+                                                        .cumulativeBytesLoaded /\r\n+                                                    (loadingProgress\r\n+                                                            .expectedTotalBytes ??\r\n+                                                        1)\r\n+                                                : null,\r\n+                                          ),\r\n+                                        );\r\n+                                      }\r\n+                                    },\r\n+                                    errorBuilder: (context, error, stackTrace) {\r\n+                                      return const Center(\r\n+                                        // Display an error icon or fallback widget in case of failure\r\n+                                        child: Icon(\r\n+                                          Icons.error,\r\n+                                          color: Colors.red,\r\n+                                          size: 40,\r\n+                                        ),\r\n+                                      );\r\n+                                    },\r\n+                                  ),\r\n+                                ).paddingOnly(bottom: 10),\r\n+                              ),\r\n+                              Expanded(\r\n+                                child: Container(\r\n+                                  width:\r\n+                                      MediaQuery.of(context).size.width * 0.6,\r\n+                                  decoration: const BoxDecoration(\r\n+                                    borderRadius: BorderRadius.only(\r\n+                                      topRight: Radius.circular(15),\r\n+                                      bottomRight: Radius.circular(15),\r\n+                                    ),\r\n+                                  ),\r\n+                                  child: Column(\r\n+                                    crossAxisAlignment:\r\n+                                        CrossAxisAlignment.start,\r\n+                                    children: [\r\n+                                      Text(\r\n+                                        item.title ?? \"\",\r\n+                                        style: const TextStyle(\r\n+                                          fontSize: 13,\r\n+                                          color: adoptifyPrimaryColor,\r\n+                                          fontWeight: FontWeight.bold,\r\n+                                          fontStyle: FontStyle.italic,\r\n+                                        ),\r\n+                                      ),\r\n+                                        if (_isAdLoaded)\r\n+            Container(\r\n+              alignment: Alignment.center,\r\n+              width: _bannerAd!.size.width.toDouble(),\r\n+              height: _bannerAd!.size.height.toDouble(),\r\n+              child: AdWidget(ad: _bannerAd!),\r\n+            ),\r\n+                                      LimitedBox(\r\n+                                        maxWidth:\r\n+                                            MediaQuery.of(context).size.width *\r\n+                                                0.3,\r\n+                                        child: Text(\r\n+                                          item.subtitle ?? \"\",\r\n+                                          maxLines: 2,\r\n+                                          style: const TextStyle(\r\n+                                              color: Colors.grey,\r\n+                                              fontWeight: FontWeight.bold,\r\n+                                              fontSize: 13),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ).paddingAll(\r\n+                                    MediaQuery.of(context).size.height * 0.005,\r\n+                                  ),\r\n+                                ).paddingOnly(\r\n+                                    left: MediaQuery.of(context).size.width *\r\n+                                        0.02),\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            );\r\n+          });\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746442925379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n }\r\n \r\n class _BlogsviewAllState extends State<BlogsviewAll> {\r\n-    BannerAd? _bannerAd;\r\n+  BannerAd? _bannerAd;\r\n   bool _isAdLoaded = false;\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n@@ -28,10 +28,9 @@\n   }\r\n \r\n   void _initAd() {\r\n     _bannerAd = BannerAd(\r\n-      adUnitId:\r\n-          'ca-app-pub-3940256099942544/6300978111', \r\n+      adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n       request: AdRequest(),\r\n       size: AdSize.banner,\r\n       listener: BannerAdListener(\r\n         onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n@@ -47,211 +46,10 @@\n   void dispose() {\r\n     _bannerAd?.dispose();\r\n     super.dispose();\r\n   }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final BlogController blogsController = Get.find<BlogController>();\r\n-    return AppScaffold(\r\n-      appBarTitle: Text(\r\n-        \"Blogs\",\r\n-        style:\r\n-            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n-      ),\r\n-      body: ListView.builder(\r\n-        itemCount: blogsController.items.length,\r\n-        itemBuilder: (context, index) {\r\n-          return Obx(() {\r\n-            final item = blogsController.items[index];\r\n-            return Padding(\r\n-              padding:\r\n-                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-              child: Row(\r\n-                children: [\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      Get.to(\r\n-                        () => BlogDetailScreen(\r\n-                          subtitle: item.subtitle,\r\n-                          time: item.time,\r\n-                          image: item.image,\r\n-                          paragraph: item.paragraph,\r\n-                        ),\r\n-                      );\r\n-                    },\r\n-                    child: Row(\r\n-                      children: [\r\n-                        Container(\r\n-                          height:\r\n-                              MediaQuery.of(context).size.height * 0.12, //100,\r\n-                          width:\r\n-                              MediaQuery.of(context).size.width * 0.92, //428,\r\n-                          decoration: BoxDecoration(\r\n-                            color: context.cardColor,\r\n-                            borderRadius: BorderRadius.circular(15),\r\n-                          ),\r\n-                          child: Row(\r\n-                            children: [\r\n-                              Hero(\r\n-                                tag: item.image ??\r\n-                                    \"\", // Use null-aware operator to handle null image\r\n-                                child: SizedBox(\r\n-                                  width: 100,\r\n-                                  height: 100,\r\n-                                  child: Image.network(\r\n-                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                        \"\", // Fallback to empty string if image is null\r\n-                                    fit: BoxFit.cover,\r\n-                                    loadingBuilder:\r\n-                                        (context, child, loadingProgress) {\r\n-                                      if (loadingProgress == null) {\r\n-                                        return child; // Show the image once it has loaded\r\n-                                      } else {\r\n-                                        return Center(\r\n-                                          // Display a loading indicator while the image loads\r\n-                                          child: CircularProgressIndicator(\r\n-                                            value: loadingProgress\r\n-                                                        .expectedTotalBytes !=\r\n-                                                    null\r\n-                                                ? loadingProgress\r\n-                                                        .cumulativeBytesLoaded /\r\n-                                                    (loadingProgress\r\n-                                                            .expectedTotalBytes ??\r\n-                                                        1)\r\n-                                                : null,\r\n-                                          ),\r\n-                                        );\r\n-                                      }\r\n-                                    },\r\n-                                    errorBuilder: (context, error, stackTrace) {\r\n-                                      return const Center(\r\n-                                        // Display an error icon or fallback widget in case of failure\r\n-                                        child: Icon(\r\n-                                          Icons.error,\r\n-                                          color: Colors.red,\r\n-                                          size: 40,\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                ).paddingOnly(bottom: 10),\r\n-                              ),\r\n-                              Expanded(\r\n-                                child: Container(\r\n-                                  width:\r\n-                                      MediaQuery.of(context).size.width * 0.6,\r\n-                                  decoration: const BoxDecoration(\r\n-                                    borderRadius: BorderRadius.only(\r\n-                                      topRight: Radius.circular(15),\r\n-                                      bottomRight: Radius.circular(15),\r\n-                                    ),\r\n-                                  ),\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment:\r\n-                                        CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      Text(\r\n-                                        item.title ?? \"\",\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 13,\r\n-                                          color: adoptifyPrimaryColor,\r\n-                                          fontWeight: FontWeight.bold,\r\n-                                          fontStyle: FontStyle.italic,\r\n-                                        ),\r\n-                                      ),\r\n-                                        if (_isAdLoaded)\r\n-            Container(\r\n-              alignment: Alignment.center,\r\n-              width: _bannerAd!.size.width.toDouble(),\r\n-              height: _bannerAd!.size.height.toDouble(),\r\n-              child: AdWidget(ad: _bannerAd!),\r\n-            ),\r\n-                                      LimitedBox(\r\n-                                        maxWidth:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.3,\r\n-                                        child: Text(\r\n-                                          item.subtitle ?? \"\",\r\n-                                          maxLines: 2,\r\n-                                          style: const TextStyle(\r\n-                                              color: Colors.grey,\r\n-                                              fontWeight: FontWeight.bold,\r\n-                                              fontSize: 13),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ).paddingAll(\r\n-                                    MediaQuery.of(context).size.height * 0.005,\r\n-                                  ),\r\n-                                ).paddingOnly(\r\n-                                    left: MediaQuery.of(context).size.width *\r\n-                                        0.02),\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            );\r\n-          });\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/widgets.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:nb_utils/nb_utils.dart';\r\n-import 'package:templering/utils/appscaffold.dart';\r\n-import '../../../utils/color.dart';\r\n-import 'blog_model.dart';\r\n-import 'blogs_controller.dart';\r\n-import 'blogs_detail_screen.dart';\r\n \r\n-class BlogsviewAll extends StatefulWidget {\r\n-  final List<BlogItem> items;\r\n-\r\n-  const BlogsviewAll({super.key, required this.items});\r\n-\r\n   @override\r\n-  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n-}\r\n-\r\n-class _BlogsviewAllState extends State<BlogsviewAll> {\r\n-    BannerAd? _bannerAd;\r\n-  bool _isAdLoaded = false;\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initAd();\r\n-  }\r\n-\r\n-  void _initAd() {\r\n-    _bannerAd = BannerAd(\r\n-      adUnitId:\r\n-          'ca-app-pub-3940256099942544/6300978111', \r\n-      request: AdRequest(),\r\n-      size: AdSize.banner,\r\n-      listener: BannerAdListener(\r\n-        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n-        onAdFailedToLoad: (ad, error) {\r\n-          ad.dispose();\r\n-          log('Ad failed to load: ${error.message}');\r\n-        },\r\n-      ),\r\n-    )..load();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _bannerAd?.dispose();\r\n-    super.dispose();\r\n-  }\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n     final BlogController blogsController = Get.find<BlogController>();\r\n     return AppScaffold(\r\n       appBarTitle: Text(\r\n@@ -359,8 +157,9 @@\n                                           fontWeight: FontWeight.bold,\r\n                                           fontStyle: FontStyle.italic,\r\n                                         ),\r\n                                       ),\r\n+                                     \r\n                                       LimitedBox(\r\n                                         maxWidth:\r\n                                             MediaQuery.of(context).size.width *\r\n                                                 0.3,\r\n@@ -395,358 +194,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/widgets.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:nb_utils/nb_utils.dart';\r\n-import 'package:templering/utils/appscaffold.dart';\r\n-import '../../../utils/color.dart';\r\n-import 'blog_model.dart';\r\n-import 'blogs_controller.dart';\r\n-import 'blogs_detail_screen.dart';\r\n-\r\n-class BlogsviewAll extends StatefulWidget {\r\n-  final List<BlogItem> items;\r\n-\r\n-  const BlogsviewAll({super.key, required this.items});\r\n-\r\n-  @override\r\n-  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n-}\r\n-\r\n-class _BlogsviewAllState extends State<BlogsviewAll> {\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initAd();\r\n-  }\r\n-\r\n-  void _initAd() {\r\n-    _bannerAd = BannerAd(\r\n-      adUnitId:\r\n-          'ca-app-pub-3940256099942544/6300978111', \r\n-      request: AdRequest(),\r\n-      size: AdSize.banner,\r\n-      listener: BannerAdListener(\r\n-        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n-        onAdFailedToLoad: (ad, error) {\r\n-          ad.dispose();\r\n-          log('Ad failed to load: ${error.message}');\r\n-        },\r\n-      ),\r\n-    )..load();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _bannerAd?.dispose();\r\n-    super.dispose();\r\n-  }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final BlogController blogsController = Get.find<BlogController>();\r\n-    return AppScaffold(\r\n-      appBarTitle: Text(\r\n-        \"Blogs\",\r\n-        style:\r\n-            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n-      ),\r\n-      body: ListView.builder(\r\n-        itemCount: blogsController.items.length,\r\n-        itemBuilder: (context, index) {\r\n-          return Obx(() {\r\n-            final item = blogsController.items[index];\r\n-            return Padding(\r\n-              padding:\r\n-                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-              child: Row(\r\n-                children: [\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      Get.to(\r\n-                        () => BlogDetailScreen(\r\n-                          subtitle: item.subtitle,\r\n-                          time: item.time,\r\n-                          image: item.image,\r\n-                          paragraph: item.paragraph,\r\n-                        ),\r\n-                      );\r\n-                    },\r\n-                    child: Row(\r\n-                      children: [\r\n-                        Container(\r\n-                          height:\r\n-                              MediaQuery.of(context).size.height * 0.12, //100,\r\n-                          width:\r\n-                              MediaQuery.of(context).size.width * 0.92, //428,\r\n-                          decoration: BoxDecoration(\r\n-                            color: context.cardColor,\r\n-                            borderRadius: BorderRadius.circular(15),\r\n-                          ),\r\n-                          child: Row(\r\n-                            children: [\r\n-                              Hero(\r\n-                                tag: item.image ??\r\n-                                    \"\", // Use null-aware operator to handle null image\r\n-                                child: SizedBox(\r\n-                                  width: 100,\r\n-                                  height: 100,\r\n-                                  child: Image.network(\r\n-                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                        \"\", // Fallback to empty string if image is null\r\n-                                    fit: BoxFit.cover,\r\n-                                    loadingBuilder:\r\n-                                        (context, child, loadingProgress) {\r\n-                                      if (loadingProgress == null) {\r\n-                                        return child; // Show the image once it has loaded\r\n-                                      } else {\r\n-                                        return Center(\r\n-                                          // Display a loading indicator while the image loads\r\n-                                          child: CircularProgressIndicator(\r\n-                                            value: loadingProgress\r\n-                                                        .expectedTotalBytes !=\r\n-                                                    null\r\n-                                                ? loadingProgress\r\n-                                                        .cumulativeBytesLoaded /\r\n-                                                    (loadingProgress\r\n-                                                            .expectedTotalBytes ??\r\n-                                                        1)\r\n-                                                : null,\r\n-                                          ),\r\n-                                        );\r\n-                                      }\r\n-                                    },\r\n-                                    errorBuilder: (context, error, stackTrace) {\r\n-                                      return const Center(\r\n-                                        // Display an error icon or fallback widget in case of failure\r\n-                                        child: Icon(\r\n-                                          Icons.error,\r\n-                                          color: Colors.red,\r\n-                                          size: 40,\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                ).paddingOnly(bottom: 10),\r\n-                              ),\r\n-                              Expanded(\r\n-                                child: Container(\r\n-                                  width:\r\n-                                      MediaQuery.of(context).size.width * 0.6,\r\n-                                  decoration: const BoxDecoration(\r\n-                                    borderRadius: BorderRadius.only(\r\n-                                      topRight: Radius.circular(15),\r\n-                                      bottomRight: Radius.circular(15),\r\n-                                    ),\r\n-                                  ),\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment:\r\n-                                        CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      Text(\r\n-                                        item.title ?? \"\",\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 13,\r\n-                                          color: adoptifyPrimaryColor,\r\n-                                          fontWeight: FontWeight.bold,\r\n-                                          fontStyle: FontStyle.italic,\r\n-                                        ),\r\n-                                      ),\r\n-                                      LimitedBox(\r\n-                                        maxWidth:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.3,\r\n-                                        child: Text(\r\n-                                          item.subtitle ?? \"\",\r\n-                                          maxLines: 2,\r\n-                                          style: const TextStyle(\r\n-                                              color: Colors.grey,\r\n-                                              fontWeight: FontWeight.bold,\r\n-                                              fontSize: 13),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ).paddingAll(\r\n-                                    MediaQuery.of(context).size.height * 0.005,\r\n-                                  ),\r\n-                                ).paddingOnly(\r\n-                                    left: MediaQuery.of(context).size.width *\r\n-                                        0.02),\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            );\r\n-          });\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/widgets.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:nb_utils/nb_utils.dart';\r\n-import 'package:templering/utils/appscaffold.dart';\r\n-import '../../../utils/color.dart';\r\n-import 'blog_model.dart';\r\n-import 'blogs_controller.dart';\r\n-import 'blogs_detail_screen.dart';\r\n-\r\n-class BlogsviewAll extends StatelessWidget {\r\n-  final List<BlogItem> items;\r\n-\r\n-  const BlogsviewAll({super.key, required this.items});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final BlogController blogsController = Get.find<BlogController>();\r\n-    return AppScaffold(\r\n-      appBarTitle: Text(\r\n-        \"Blogs\",\r\n-        style:\r\n-            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n-      ),\r\n-      body: ListView.builder(\r\n-        itemCount: blogsController.items.length,\r\n-        itemBuilder: (context, index) {\r\n-          return Obx(() {\r\n-            final item = blogsController.items[index];\r\n-            return Padding(\r\n-              padding:\r\n-                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-              child: Row(\r\n-                children: [\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      Get.to(\r\n-                        () => BlogDetailScreen(\r\n-                          subtitle: item.subtitle,\r\n-                          time: item.time,\r\n-                          image: item.image,\r\n-                          paragraph: item.paragraph,\r\n-                        ),\r\n-                      );\r\n-                    },\r\n-                    child: Row(\r\n-                      children: [\r\n-                        Container(\r\n-                          height:\r\n-                              MediaQuery.of(context).size.height * 0.12, //100,\r\n-                          width:\r\n-                              MediaQuery.of(context).size.width * 0.92, //428,\r\n-                          decoration: BoxDecoration(\r\n-                            color: context.cardColor,\r\n-                            borderRadius: BorderRadius.circular(15),\r\n-                          ),\r\n-                          child: Row(\r\n-                            children: [\r\n-                              Hero(\r\n-                                tag: item.image ??\r\n-                                    \"\", // Use null-aware operator to handle null image\r\n-                                child: SizedBox(\r\n-                                  width: 100,\r\n-                                  height: 100,\r\n-                                  child: Image.network(\r\n-                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                        \"\", // Fallback to empty string if image is null\r\n-                                    fit: BoxFit.cover,\r\n-                                    loadingBuilder:\r\n-                                        (context, child, loadingProgress) {\r\n-                                      if (loadingProgress == null) {\r\n-                                        return child; // Show the image once it has loaded\r\n-                                      } else {\r\n-                                        return Center(\r\n-                                          // Display a loading indicator while the image loads\r\n-                                          child: CircularProgressIndicator(\r\n-                                            value: loadingProgress\r\n-                                                        .expectedTotalBytes !=\r\n-                                                    null\r\n-                                                ? loadingProgress\r\n-                                                        .cumulativeBytesLoaded /\r\n-                                                    (loadingProgress\r\n-                                                            .expectedTotalBytes ??\r\n-                                                        1)\r\n-                                                : null,\r\n-                                          ),\r\n-                                        );\r\n-                                      }\r\n-                                    },\r\n-                                    errorBuilder: (context, error, stackTrace) {\r\n-                                      return const Center(\r\n-                                        // Display an error icon or fallback widget in case of failure\r\n-                                        child: Icon(\r\n-                                          Icons.error,\r\n-                                          color: Colors.red,\r\n-                                          size: 40,\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                ).paddingOnly(bottom: 10),\r\n-                              ),\r\n-                              Expanded(\r\n-                                child: Container(\r\n-                                  width:\r\n-                                      MediaQuery.of(context).size.width * 0.6,\r\n-                                  decoration: const BoxDecoration(\r\n-                                    borderRadius: BorderRadius.only(\r\n-                                      topRight: Radius.circular(15),\r\n-                                      bottomRight: Radius.circular(15),\r\n-                                    ),\r\n-                                  ),\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment:\r\n-                                        CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      Text(\r\n-                                        item.title ?? \"\",\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 13,\r\n-                                          color: adoptifyPrimaryColor,\r\n-                                          fontWeight: FontWeight.bold,\r\n-                                          fontStyle: FontStyle.italic,\r\n-                                        ),\r\n-                                      ),\r\n-                                      LimitedBox(\r\n-                                        maxWidth:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.3,\r\n-                                        child: Text(\r\n-                                          item.subtitle ?? \"\",\r\n-                                          maxLines: 2,\r\n-                                          style: const TextStyle(\r\n-                                              color: Colors.grey,\r\n-                                              fontWeight: FontWeight.bold,\r\n-                                              fontSize: 13),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ).paddingAll(\r\n-                                    MediaQuery.of(context).size.height * 0.005,\r\n-                                  ),\r\n-                                ).paddingOnly(\r\n-                                    left: MediaQuery.of(context).size.width *\r\n-                                        0.02),\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            );\r\n-          });\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746443175354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,20 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/widgets.dart';\r\n import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n import 'package:nb_utils/nb_utils.dart';\r\n import 'package:templering/utils/appscaffold.dart';\r\n import '../../../utils/color.dart';\r\n import 'blog_model.dart';\r\n import 'blogs_controller.dart';\r\n import 'blogs_detail_screen.dart';\r\n \r\n-class BlogsviewAll extends StatefulWidget {\r\n+class BlogsviewAll extends StatelessWidget {\r\n   final List<BlogItem> items;\r\n \r\n   const BlogsviewAll({super.key, required this.items});\r\n \r\n   @override\r\n-  State<BlogsviewAll> createState() => _BlogsviewAllState();\r\n-}\r\n-\r\n-class _BlogsviewAllState extends State<BlogsviewAll> {\r\n-  BannerAd? _bannerAd;\r\n-  bool _isAdLoaded = false;\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initAd();\r\n-  }\r\n-\r\n-  void _initAd() {\r\n-    _bannerAd = BannerAd(\r\n-      adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n-      request: AdRequest(),\r\n-      size: AdSize.banner,\r\n-      listener: BannerAdListener(\r\n-        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n-        onAdFailedToLoad: (ad, error) {\r\n-          ad.dispose();\r\n-          log('Ad failed to load: ${error.message}');\r\n-        },\r\n-      ),\r\n-    )..load();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _bannerAd?.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n     final BlogController blogsController = Get.find<BlogController>();\r\n     return AppScaffold(\r\n       appBarTitle: Text(\r\n@@ -157,9 +122,8 @@\n                                           fontWeight: FontWeight.bold,\r\n                                           fontStyle: FontStyle.italic,\r\n                                         ),\r\n                                       ),\r\n-                                     \r\n                                       LimitedBox(\r\n                                         maxWidth:\r\n                                             MediaQuery.of(context).size.width *\r\n                                                 0.3,\r\n"
                },
                {
                    "date": 1746443205776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,141 +21,145 @@\n         \"Blogs\",\r\n         style:\r\n             primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n       ),\r\n-      body: ListView.builder(\r\n-        itemCount: blogsController.items.length,\r\n-        itemBuilder: (context, index) {\r\n-          return Obx(() {\r\n-            final item = blogsController.items[index];\r\n-            return Padding(\r\n-              padding:\r\n-                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-              child: Row(\r\n-                children: [\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      Get.to(\r\n-                        () => BlogDetailScreen(\r\n-                          subtitle: item.subtitle,\r\n-                          time: item.time,\r\n-                          image: item.image,\r\n-                          paragraph: item.paragraph,\r\n-                        ),\r\n-                      );\r\n-                    },\r\n-                    child: Row(\r\n-                      children: [\r\n-                        Container(\r\n-                          height:\r\n-                              MediaQuery.of(context).size.height * 0.12, //100,\r\n-                          width:\r\n-                              MediaQuery.of(context).size.width * 0.92, //428,\r\n-                          decoration: BoxDecoration(\r\n-                            color: context.cardColor,\r\n-                            borderRadius: BorderRadius.circular(15),\r\n-                          ),\r\n-                          child: Row(\r\n-                            children: [\r\n-                              Hero(\r\n-                                tag: item.image ??\r\n-                                    \"\", // Use null-aware operator to handle null image\r\n-                                child: SizedBox(\r\n-                                  width: 100,\r\n-                                  height: 100,\r\n-                                  child: Image.network(\r\n-                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                        \"\", // Fallback to empty string if image is null\r\n-                                    fit: BoxFit.cover,\r\n-                                    loadingBuilder:\r\n-                                        (context, child, loadingProgress) {\r\n-                                      if (loadingProgress == null) {\r\n-                                        return child; // Show the image once it has loaded\r\n-                                      } else {\r\n-                                        return Center(\r\n-                                          // Display a loading indicator while the image loads\r\n-                                          child: CircularProgressIndicator(\r\n-                                            value: loadingProgress\r\n-                                                        .expectedTotalBytes !=\r\n-                                                    null\r\n-                                                ? loadingProgress\r\n-                                                        .cumulativeBytesLoaded /\r\n-                                                    (loadingProgress\r\n-                                                            .expectedTotalBytes ??\r\n-                                                        1)\r\n-                                                : null,\r\n-                                          ),\r\n-                                        );\r\n-                                      }\r\n-                                    },\r\n-                                    errorBuilder: (context, error, stackTrace) {\r\n-                                      return const Center(\r\n-                                        // Display an error icon or fallback widget in case of failure\r\n-                                        child: Icon(\r\n-                                          Icons.error,\r\n-                                          color: Colors.red,\r\n-                                          size: 40,\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                ).paddingOnly(bottom: 10),\r\n+      body: Column(\r\n+        children: [\r\n+          ListView.builder(\r\n+            itemCount: blogsController.items.length,\r\n+            itemBuilder: (context, index) {\r\n+              return Obx(() {\r\n+                final item = blogsController.items[index];\r\n+                return Padding(\r\n+                  padding:\r\n+                      EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+                  child: Row(\r\n+                    children: [\r\n+                      InkWell(\r\n+                        onTap: () {\r\n+                          Get.to(\r\n+                            () => BlogDetailScreen(\r\n+                              subtitle: item.subtitle,\r\n+                              time: item.time,\r\n+                              image: item.image,\r\n+                              paragraph: item.paragraph,\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                        child: Row(\r\n+                          children: [\r\n+                            Container(\r\n+                              height:\r\n+                                  MediaQuery.of(context).size.height * 0.12, //100,\r\n+                              width:\r\n+                                  MediaQuery.of(context).size.width * 0.92, //428,\r\n+                              decoration: BoxDecoration(\r\n+                                color: context.cardColor,\r\n+                                borderRadius: BorderRadius.circular(15),\r\n                               ),\r\n-                              Expanded(\r\n-                                child: Container(\r\n-                                  width:\r\n-                                      MediaQuery.of(context).size.width * 0.6,\r\n-                                  decoration: const BoxDecoration(\r\n-                                    borderRadius: BorderRadius.only(\r\n-                                      topRight: Radius.circular(15),\r\n-                                      bottomRight: Radius.circular(15),\r\n-                                    ),\r\n+                              child: Row(\r\n+                                children: [\r\n+                                  Hero(\r\n+                                    tag: item.image ??\r\n+                                        \"\", // Use null-aware operator to handle null image\r\n+                                    child: SizedBox(\r\n+                                      width: 100,\r\n+                                      height: 100,\r\n+                                      child: Image.network(\r\n+                                        'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                            \"\", // Fallback to empty string if image is null\r\n+                                        fit: BoxFit.cover,\r\n+                                        loadingBuilder:\r\n+                                            (context, child, loadingProgress) {\r\n+                                          if (loadingProgress == null) {\r\n+                                            return child; // Show the image once it has loaded\r\n+                                          } else {\r\n+                                            return Center(\r\n+                                              // Display a loading indicator while the image loads\r\n+                                              child: CircularProgressIndicator(\r\n+                                                value: loadingProgress\r\n+                                                            .expectedTotalBytes !=\r\n+                                                        null\r\n+                                                    ? loadingProgress\r\n+                                                            .cumulativeBytesLoaded /\r\n+                                                        (loadingProgress\r\n+                                                                .expectedTotalBytes ??\r\n+                                                            1)\r\n+                                                    : null,\r\n+                                              ),\r\n+                                            );\r\n+                                          }\r\n+                                        },\r\n+                                        errorBuilder: (context, error, stackTrace) {\r\n+                                          return const Center(\r\n+                                            // Display an error icon or fallback widget in case of failure\r\n+                                            child: Icon(\r\n+                                              Icons.error,\r\n+                                              color: Colors.red,\r\n+                                              size: 40,\r\n+                                            ),\r\n+                                          );\r\n+                                        },\r\n+                                      ),\r\n+                                    ).paddingOnly(bottom: 10),\r\n                                   ),\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment:\r\n-                                        CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      Text(\r\n-                                        item.title ?? \"\",\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 13,\r\n-                                          color: adoptifyPrimaryColor,\r\n-                                          fontWeight: FontWeight.bold,\r\n-                                          fontStyle: FontStyle.italic,\r\n+                                  Expanded(\r\n+                                    child: Container(\r\n+                                      width:\r\n+                                          MediaQuery.of(context).size.width * 0.6,\r\n+                                      decoration: const BoxDecoration(\r\n+                                        borderRadius: BorderRadius.only(\r\n+                                          topRight: Radius.circular(15),\r\n+                                          bottomRight: Radius.circular(15),\r\n                                         ),\r\n                                       ),\r\n-                                      LimitedBox(\r\n-                                        maxWidth:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.3,\r\n-                                        child: Text(\r\n-                                          item.subtitle ?? \"\",\r\n-                                          maxLines: 2,\r\n-                                          style: const TextStyle(\r\n-                                              color: Colors.grey,\r\n+                                      child: Column(\r\n+                                        crossAxisAlignment:\r\n+                                            CrossAxisAlignment.start,\r\n+                                        children: [\r\n+                                          Text(\r\n+                                            item.title ?? \"\",\r\n+                                            style: const TextStyle(\r\n+                                              fontSize: 13,\r\n+                                              color: adoptifyPrimaryColor,\r\n                                               fontWeight: FontWeight.bold,\r\n-                                              fontSize: 13),\r\n-                                        ),\r\n+                                              fontStyle: FontStyle.italic,\r\n+                                            ),\r\n+                                          ),\r\n+                                          LimitedBox(\r\n+                                            maxWidth:\r\n+                                                MediaQuery.of(context).size.width *\r\n+                                                    0.3,\r\n+                                            child: Text(\r\n+                                              item.subtitle ?? \"\",\r\n+                                              maxLines: 2,\r\n+                                              style: const TextStyle(\r\n+                                                  color: Colors.grey,\r\n+                                                  fontWeight: FontWeight.bold,\r\n+                                                  fontSize: 13),\r\n+                                            ),\r\n+                                          ),\r\n+                                        ],\r\n+                                      ).paddingAll(\r\n+                                        MediaQuery.of(context).size.height * 0.005,\r\n                                       ),\r\n-                                    ],\r\n-                                  ).paddingAll(\r\n-                                    MediaQuery.of(context).size.height * 0.005,\r\n+                                    ).paddingOnly(\r\n+                                        left: MediaQuery.of(context).size.width *\r\n+                                            0.02),\r\n                                   ),\r\n-                                ).paddingOnly(\r\n-                                    left: MediaQuery.of(context).size.width *\r\n-                                        0.02),\r\n+                                ],\r\n                               ),\r\n-                            ],\r\n-                          ),\r\n+                            ),\r\n+                          ],\r\n                         ),\r\n-                      ],\r\n-                    ),\r\n+                      ),\r\n+                    ],\r\n                   ),\r\n-                ],\r\n-              ),\r\n-            );\r\n-          });\r\n-        },\r\n+                );\r\n+              });\r\n+            },\r\n+          ),\r\n+        ],\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746443211308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/widgets.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:nb_utils/nb_utils.dart';\r\n+import 'package:templering/screens/blog/component/adds.dart';\r\n+import 'package:templering/utils/appscaffold.dart';\r\n+import '../../../utils/color.dart';\r\n+import 'blog_model.dart';\r\n+import 'blogs_controller.dart';\r\n+import 'blogs_detail_screen.dart';\r\n+\r\n+class BlogsviewAll extends StatelessWidget {\r\n+  final List<BlogItem> items;\r\n+\r\n+  const BlogsviewAll({super.key, required this.items});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final BlogController blogsController = Get.find<BlogController>();\r\n+    return AppScaffold(\r\n+      appBarTitle: Text(\r\n+        \"Blogs\",\r\n+        style:\r\n+            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n+      ),\r\n+      body: Column(\r\n+        children: [\r\n+           BannerAdWidget(\r\n+            adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n+          ),\r\n+          ListView.builder(\r\n+            itemCount: blogsController.items.length,\r\n+            itemBuilder: (context, index) {\r\n+              return Obx(() {\r\n+                final item = blogsController.items[index];\r\n+                return Padding(\r\n+                  padding:\r\n+                      EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+                  child: Row(\r\n+                    children: [\r\n+                      InkWell(\r\n+                        onTap: () {\r\n+                          Get.to(\r\n+                            () => BlogDetailScreen(\r\n+                              subtitle: item.subtitle,\r\n+                              time: item.time,\r\n+                              image: item.image,\r\n+                              paragraph: item.paragraph,\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                        child: Row(\r\n+                          children: [\r\n+                            Container(\r\n+                              height:\r\n+                                  MediaQuery.of(context).size.height * 0.12, //100,\r\n+                              width:\r\n+                                  MediaQuery.of(context).size.width * 0.92, //428,\r\n+                              decoration: BoxDecoration(\r\n+                                color: context.cardColor,\r\n+                                borderRadius: BorderRadius.circular(15),\r\n+                              ),\r\n+                              child: Row(\r\n+                                children: [\r\n+                                  Hero(\r\n+                                    tag: item.image ??\r\n+                                        \"\", // Use null-aware operator to handle null image\r\n+                                    child: SizedBox(\r\n+                                      width: 100,\r\n+                                      height: 100,\r\n+                                      child: Image.network(\r\n+                                        'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                            \"\", // Fallback to empty string if image is null\r\n+                                        fit: BoxFit.cover,\r\n+                                        loadingBuilder:\r\n+                                            (context, child, loadingProgress) {\r\n+                                          if (loadingProgress == null) {\r\n+                                            return child; // Show the image once it has loaded\r\n+                                          } else {\r\n+                                            return Center(\r\n+                                              // Display a loading indicator while the image loads\r\n+                                              child: CircularProgressIndicator(\r\n+                                                value: loadingProgress\r\n+                                                            .expectedTotalBytes !=\r\n+                                                        null\r\n+                                                    ? loadingProgress\r\n+                                                            .cumulativeBytesLoaded /\r\n+                                                        (loadingProgress\r\n+                                                                .expectedTotalBytes ??\r\n+                                                            1)\r\n+                                                    : null,\r\n+                                              ),\r\n+                                            );\r\n+                                          }\r\n+                                        },\r\n+                                        errorBuilder: (context, error, stackTrace) {\r\n+                                          return const Center(\r\n+                                            // Display an error icon or fallback widget in case of failure\r\n+                                            child: Icon(\r\n+                                              Icons.error,\r\n+                                              color: Colors.red,\r\n+                                              size: 40,\r\n+                                            ),\r\n+                                          );\r\n+                                        },\r\n+                                      ),\r\n+                                    ).paddingOnly(bottom: 10),\r\n+                                  ),\r\n+                                  Expanded(\r\n+                                    child: Container(\r\n+                                      width:\r\n+                                          MediaQuery.of(context).size.width * 0.6,\r\n+                                      decoration: const BoxDecoration(\r\n+                                        borderRadius: BorderRadius.only(\r\n+                                          topRight: Radius.circular(15),\r\n+                                          bottomRight: Radius.circular(15),\r\n+                                        ),\r\n+                                      ),\r\n+                                      child: Column(\r\n+                                        crossAxisAlignment:\r\n+                                            CrossAxisAlignment.start,\r\n+                                        children: [\r\n+                                          Text(\r\n+                                            item.title ?? \"\",\r\n+                                            style: const TextStyle(\r\n+                                              fontSize: 13,\r\n+                                              color: adoptifyPrimaryColor,\r\n+                                              fontWeight: FontWeight.bold,\r\n+                                              fontStyle: FontStyle.italic,\r\n+                                            ),\r\n+                                          ),\r\n+                                          LimitedBox(\r\n+                                            maxWidth:\r\n+                                                MediaQuery.of(context).size.width *\r\n+                                                    0.3,\r\n+                                            child: Text(\r\n+                                              item.subtitle ?? \"\",\r\n+                                              maxLines: 2,\r\n+                                              style: const TextStyle(\r\n+                                                  color: Colors.grey,\r\n+                                                  fontWeight: FontWeight.bold,\r\n+                                                  fontSize: 13),\r\n+                                            ),\r\n+                                          ),\r\n+                                        ],\r\n+                                      ).paddingAll(\r\n+                                        MediaQuery.of(context).size.height * 0.005,\r\n+                                      ),\r\n+                                    ).paddingOnly(\r\n+                                        left: MediaQuery.of(context).size.width *\r\n+                                            0.02),\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                            ),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    ],\r\n+                  ),\r\n+                );\r\n+              });\r\n+            },\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746443241837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,17 @@\n             primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n       ),\r\n       body: Column(\r\n         children: [\r\n-           BannerAdWidget(\r\n-            adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n-          ),\r\n+         \r\n           ListView.builder(\r\n             itemCount: blogsController.items.length,\r\n             itemBuilder: (context, index) {\r\n               return Obx(() {\r\n                 final item = blogsController.items[index];\r\n                 return Padding(\r\n-                  padding:\r\n-                      EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+                  padding: EdgeInsets.all(\r\n+                      MediaQuery.of(context).size.height * 0.008),\r\n                   child: Row(\r\n                     children: [\r\n                       InkWell(\r\n                         onTap: () {\r\n@@ -51,12 +49,12 @@\n                         },\r\n                         child: Row(\r\n                           children: [\r\n                             Container(\r\n-                              height:\r\n-                                  MediaQuery.of(context).size.height * 0.12, //100,\r\n-                              width:\r\n-                                  MediaQuery.of(context).size.width * 0.92, //428,\r\n+                              height: MediaQuery.of(context).size.height *\r\n+                                  0.12, //100,\r\n+                              width: MediaQuery.of(context).size.width *\r\n+                                  0.92, //428,\r\n                               decoration: BoxDecoration(\r\n                                 color: context.cardColor,\r\n                                 borderRadius: BorderRadius.circular(15),\r\n                               ),\r\n@@ -92,9 +90,10 @@\n                                               ),\r\n                                             );\r\n                                           }\r\n                                         },\r\n-                                        errorBuilder: (context, error, stackTrace) {\r\n+                                        errorBuilder:\r\n+                                            (context, error, stackTrace) {\r\n                                           return const Center(\r\n                                             // Display an error icon or fallback widget in case of failure\r\n                                             child: Icon(\r\n                                               Icons.error,\r\n@@ -107,10 +106,10 @@\n                                     ).paddingOnly(bottom: 10),\r\n                                   ),\r\n                                   Expanded(\r\n                                     child: Container(\r\n-                                      width:\r\n-                                          MediaQuery.of(context).size.width * 0.6,\r\n+                                      width: MediaQuery.of(context).size.width *\r\n+                                          0.6,\r\n                                       decoration: const BoxDecoration(\r\n                                         borderRadius: BorderRadius.only(\r\n                                           topRight: Radius.circular(15),\r\n                                           bottomRight: Radius.circular(15),\r\n@@ -129,11 +128,12 @@\n                                               fontStyle: FontStyle.italic,\r\n                                             ),\r\n                                           ),\r\n                                           LimitedBox(\r\n-                                            maxWidth:\r\n-                                                MediaQuery.of(context).size.width *\r\n-                                                    0.3,\r\n+                                            maxWidth: MediaQuery.of(context)\r\n+                                                    .size\r\n+                                                    .width *\r\n+                                                0.3,\r\n                                             child: Text(\r\n                                               item.subtitle ?? \"\",\r\n                                               maxLines: 2,\r\n                                               style: const TextStyle(\r\n@@ -143,13 +143,15 @@\n                                             ),\r\n                                           ),\r\n                                         ],\r\n                                       ).paddingAll(\r\n-                                        MediaQuery.of(context).size.height * 0.005,\r\n+                                        MediaQuery.of(context).size.height *\r\n+                                            0.005,\r\n                                       ),\r\n                                     ).paddingOnly(\r\n-                                        left: MediaQuery.of(context).size.width *\r\n-                                            0.02),\r\n+                                        left:\r\n+                                            MediaQuery.of(context).size.width *\r\n+                                                0.02),\r\n                                   ),\r\n                                 ],\r\n                               ),\r\n                             ),\r\n@@ -166,169 +168,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/widgets.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:nb_utils/nb_utils.dart';\r\n-import 'package:templering/utils/appscaffold.dart';\r\n-import '../../../utils/color.dart';\r\n-import 'blog_model.dart';\r\n-import 'blogs_controller.dart';\r\n-import 'blogs_detail_screen.dart';\r\n-\r\n-class BlogsviewAll extends StatelessWidget {\r\n-  final List<BlogItem> items;\r\n-\r\n-  const BlogsviewAll({super.key, required this.items});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final BlogController blogsController = Get.find<BlogController>();\r\n-    return AppScaffold(\r\n-      appBarTitle: Text(\r\n-        \"Blogs\",\r\n-        style:\r\n-            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n-      ),\r\n-      body: Column(\r\n-        children: [\r\n-          ListView.builder(\r\n-            itemCount: blogsController.items.length,\r\n-            itemBuilder: (context, index) {\r\n-              return Obx(() {\r\n-                final item = blogsController.items[index];\r\n-                return Padding(\r\n-                  padding:\r\n-                      EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-                  child: Row(\r\n-                    children: [\r\n-                      InkWell(\r\n-                        onTap: () {\r\n-                          Get.to(\r\n-                            () => BlogDetailScreen(\r\n-                              subtitle: item.subtitle,\r\n-                              time: item.time,\r\n-                              image: item.image,\r\n-                              paragraph: item.paragraph,\r\n-                            ),\r\n-                          );\r\n-                        },\r\n-                        child: Row(\r\n-                          children: [\r\n-                            Container(\r\n-                              height:\r\n-                                  MediaQuery.of(context).size.height * 0.12, //100,\r\n-                              width:\r\n-                                  MediaQuery.of(context).size.width * 0.92, //428,\r\n-                              decoration: BoxDecoration(\r\n-                                color: context.cardColor,\r\n-                                borderRadius: BorderRadius.circular(15),\r\n-                              ),\r\n-                              child: Row(\r\n-                                children: [\r\n-                                  Hero(\r\n-                                    tag: item.image ??\r\n-                                        \"\", // Use null-aware operator to handle null image\r\n-                                    child: SizedBox(\r\n-                                      width: 100,\r\n-                                      height: 100,\r\n-                                      child: Image.network(\r\n-                                        'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                            \"\", // Fallback to empty string if image is null\r\n-                                        fit: BoxFit.cover,\r\n-                                        loadingBuilder:\r\n-                                            (context, child, loadingProgress) {\r\n-                                          if (loadingProgress == null) {\r\n-                                            return child; // Show the image once it has loaded\r\n-                                          } else {\r\n-                                            return Center(\r\n-                                              // Display a loading indicator while the image loads\r\n-                                              child: CircularProgressIndicator(\r\n-                                                value: loadingProgress\r\n-                                                            .expectedTotalBytes !=\r\n-                                                        null\r\n-                                                    ? loadingProgress\r\n-                                                            .cumulativeBytesLoaded /\r\n-                                                        (loadingProgress\r\n-                                                                .expectedTotalBytes ??\r\n-                                                            1)\r\n-                                                    : null,\r\n-                                              ),\r\n-                                            );\r\n-                                          }\r\n-                                        },\r\n-                                        errorBuilder: (context, error, stackTrace) {\r\n-                                          return const Center(\r\n-                                            // Display an error icon or fallback widget in case of failure\r\n-                                            child: Icon(\r\n-                                              Icons.error,\r\n-                                              color: Colors.red,\r\n-                                              size: 40,\r\n-                                            ),\r\n-                                          );\r\n-                                        },\r\n-                                      ),\r\n-                                    ).paddingOnly(bottom: 10),\r\n-                                  ),\r\n-                                  Expanded(\r\n-                                    child: Container(\r\n-                                      width:\r\n-                                          MediaQuery.of(context).size.width * 0.6,\r\n-                                      decoration: const BoxDecoration(\r\n-                                        borderRadius: BorderRadius.only(\r\n-                                          topRight: Radius.circular(15),\r\n-                                          bottomRight: Radius.circular(15),\r\n-                                        ),\r\n-                                      ),\r\n-                                      child: Column(\r\n-                                        crossAxisAlignment:\r\n-                                            CrossAxisAlignment.start,\r\n-                                        children: [\r\n-                                          Text(\r\n-                                            item.title ?? \"\",\r\n-                                            style: const TextStyle(\r\n-                                              fontSize: 13,\r\n-                                              color: adoptifyPrimaryColor,\r\n-                                              fontWeight: FontWeight.bold,\r\n-                                              fontStyle: FontStyle.italic,\r\n-                                            ),\r\n-                                          ),\r\n-                                          LimitedBox(\r\n-                                            maxWidth:\r\n-                                                MediaQuery.of(context).size.width *\r\n-                                                    0.3,\r\n-                                            child: Text(\r\n-                                              item.subtitle ?? \"\",\r\n-                                              maxLines: 2,\r\n-                                              style: const TextStyle(\r\n-                                                  color: Colors.grey,\r\n-                                                  fontWeight: FontWeight.bold,\r\n-                                                  fontSize: 13),\r\n-                                            ),\r\n-                                          ),\r\n-                                        ],\r\n-                                      ).paddingAll(\r\n-                                        MediaQuery.of(context).size.height * 0.005,\r\n-                                      ),\r\n-                                    ).paddingOnly(\r\n-                                        left: MediaQuery.of(context).size.width *\r\n-                                            0.02),\r\n-                                  ),\r\n-                                ],\r\n-                              ),\r\n-                            ),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                );\r\n-              });\r\n-            },\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746443252791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/widgets.dart';\r\n import 'package:get/get.dart';\r\n import 'package:nb_utils/nb_utils.dart';\r\n-import 'package:templering/screens/blog/component/adds.dart';\r\n import 'package:templering/utils/appscaffold.dart';\r\n import '../../../utils/color.dart';\r\n import 'blog_model.dart';\r\n import 'blogs_controller.dart';\r\n@@ -22,150 +21,144 @@\n         \"Blogs\",\r\n         style:\r\n             primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n       ),\r\n-      body: Column(\r\n-        children: [\r\n-         \r\n-          ListView.builder(\r\n-            itemCount: blogsController.items.length,\r\n-            itemBuilder: (context, index) {\r\n-              return Obx(() {\r\n-                final item = blogsController.items[index];\r\n-                return Padding(\r\n-                  padding: EdgeInsets.all(\r\n-                      MediaQuery.of(context).size.height * 0.008),\r\n-                  child: Row(\r\n-                    children: [\r\n-                      InkWell(\r\n-                        onTap: () {\r\n-                          Get.to(\r\n-                            () => BlogDetailScreen(\r\n-                              subtitle: item.subtitle,\r\n-                              time: item.time,\r\n-                              image: item.image,\r\n-                              paragraph: item.paragraph,\r\n-                            ),\r\n-                          );\r\n-                        },\r\n-                        child: Row(\r\n-                          children: [\r\n-                            Container(\r\n-                              height: MediaQuery.of(context).size.height *\r\n-                                  0.12, //100,\r\n-                              width: MediaQuery.of(context).size.width *\r\n-                                  0.92, //428,\r\n-                              decoration: BoxDecoration(\r\n-                                color: context.cardColor,\r\n-                                borderRadius: BorderRadius.circular(15),\r\n+      body: ListView.builder(\r\n+        itemCount: blogsController.items.length,\r\n+        itemBuilder: (context, index) {\r\n+          return Obx(() {\r\n+            final item = blogsController.items[index];\r\n+            return Padding(\r\n+              padding:\r\n+                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n+              child: Row(\r\n+                children: [\r\n+                  InkWell(\r\n+                    onTap: () {\r\n+                      Get.to(\r\n+                        () => BlogDetailScreen(\r\n+                          subtitle: item.subtitle,\r\n+                          time: item.time,\r\n+                          image: item.image,\r\n+                          paragraph: item.paragraph,\r\n+                        ),\r\n+                      );\r\n+                    },\r\n+                    child: Row(\r\n+                      children: [\r\n+                        Container(\r\n+                          height:\r\n+                              MediaQuery.of(context).size.height * 0.12, //100,\r\n+                          width:\r\n+                              MediaQuery.of(context).size.width * 0.92, //428,\r\n+                          decoration: BoxDecoration(\r\n+                            color: context.cardColor,\r\n+                            borderRadius: BorderRadius.circular(15),\r\n+                          ),\r\n+                          child: Row(\r\n+                            children: [\r\n+                              Hero(\r\n+                                tag: item.image ??\r\n+                                    \"\", // Use null-aware operator to handle null image\r\n+                                child: SizedBox(\r\n+                                  width: 100,\r\n+                                  height: 100,\r\n+                                  child: Image.network(\r\n+                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                        \"\", // Fallback to empty string if image is null\r\n+                                    fit: BoxFit.cover,\r\n+                                    loadingBuilder:\r\n+                                        (context, child, loadingProgress) {\r\n+                                      if (loadingProgress == null) {\r\n+                                        return child; // Show the image once it has loaded\r\n+                                      } else {\r\n+                                        return Center(\r\n+                                          // Display a loading indicator while the image loads\r\n+                                          child: CircularProgressIndicator(\r\n+                                            value: loadingProgress\r\n+                                                        .expectedTotalBytes !=\r\n+                                                    null\r\n+                                                ? loadingProgress\r\n+                                                        .cumulativeBytesLoaded /\r\n+                                                    (loadingProgress\r\n+                                                            .expectedTotalBytes ??\r\n+                                                        1)\r\n+                                                : null,\r\n+                                          ),\r\n+                                        );\r\n+                                      }\r\n+                                    },\r\n+                                    errorBuilder: (context, error, stackTrace) {\r\n+                                      return const Center(\r\n+                                        // Display an error icon or fallback widget in case of failure\r\n+                                        child: Icon(\r\n+                                          Icons.error,\r\n+                                          color: Colors.red,\r\n+                                          size: 40,\r\n+                                        ),\r\n+                                      );\r\n+                                    },\r\n+                                  ),\r\n+                                ).paddingOnly(bottom: 10),\r\n                               ),\r\n-                              child: Row(\r\n-                                children: [\r\n-                                  Hero(\r\n-                                    tag: item.image ??\r\n-                                        \"\", // Use null-aware operator to handle null image\r\n-                                    child: SizedBox(\r\n-                                      width: 100,\r\n-                                      height: 100,\r\n-                                      child: Image.network(\r\n-                                        'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                            \"\", // Fallback to empty string if image is null\r\n-                                        fit: BoxFit.cover,\r\n-                                        loadingBuilder:\r\n-                                            (context, child, loadingProgress) {\r\n-                                          if (loadingProgress == null) {\r\n-                                            return child; // Show the image once it has loaded\r\n-                                          } else {\r\n-                                            return Center(\r\n-                                              // Display a loading indicator while the image loads\r\n-                                              child: CircularProgressIndicator(\r\n-                                                value: loadingProgress\r\n-                                                            .expectedTotalBytes !=\r\n-                                                        null\r\n-                                                    ? loadingProgress\r\n-                                                            .cumulativeBytesLoaded /\r\n-                                                        (loadingProgress\r\n-                                                                .expectedTotalBytes ??\r\n-                                                            1)\r\n-                                                    : null,\r\n-                                              ),\r\n-                                            );\r\n-                                          }\r\n-                                        },\r\n-                                        errorBuilder:\r\n-                                            (context, error, stackTrace) {\r\n-                                          return const Center(\r\n-                                            // Display an error icon or fallback widget in case of failure\r\n-                                            child: Icon(\r\n-                                              Icons.error,\r\n-                                              color: Colors.red,\r\n-                                              size: 40,\r\n-                                            ),\r\n-                                          );\r\n-                                        },\r\n-                                      ),\r\n-                                    ).paddingOnly(bottom: 10),\r\n+                              Expanded(\r\n+                                child: Container(\r\n+                                  width:\r\n+                                      MediaQuery.of(context).size.width * 0.6,\r\n+                                  decoration: const BoxDecoration(\r\n+                                    borderRadius: BorderRadius.only(\r\n+                                      topRight: Radius.circular(15),\r\n+                                      bottomRight: Radius.circular(15),\r\n+                                    ),\r\n                                   ),\r\n-                                  Expanded(\r\n-                                    child: Container(\r\n-                                      width: MediaQuery.of(context).size.width *\r\n-                                          0.6,\r\n-                                      decoration: const BoxDecoration(\r\n-                                        borderRadius: BorderRadius.only(\r\n-                                          topRight: Radius.circular(15),\r\n-                                          bottomRight: Radius.circular(15),\r\n+                                  child: Column(\r\n+                                    crossAxisAlignment:\r\n+                                        CrossAxisAlignment.start,\r\n+                                    children: [\r\n+                                       BannerAdWidget(\r\n+            adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n+          ),\r\n+                                      Text(\r\n+                                        item.title ?? \"\",\r\n+                                        style: const TextStyle(\r\n+                                          fontSize: 13,\r\n+                                          color: adoptifyPrimaryColor,\r\n+                                          fontWeight: FontWeight.bold,\r\n+                                          fontStyle: FontStyle.italic,\r\n                                         ),\r\n                                       ),\r\n-                                      child: Column(\r\n-                                        crossAxisAlignment:\r\n-                                            CrossAxisAlignment.start,\r\n-                                        children: [\r\n-                                          Text(\r\n-                                            item.title ?? \"\",\r\n-                                            style: const TextStyle(\r\n-                                              fontSize: 13,\r\n-                                              color: adoptifyPrimaryColor,\r\n+                                      LimitedBox(\r\n+                                        maxWidth:\r\n+                                            MediaQuery.of(context).size.width *\r\n+                                                0.3,\r\n+                                        child: Text(\r\n+                                          item.subtitle ?? \"\",\r\n+                                          maxLines: 2,\r\n+                                          style: const TextStyle(\r\n+                                              color: Colors.grey,\r\n                                               fontWeight: FontWeight.bold,\r\n-                                              fontStyle: FontStyle.italic,\r\n-                                            ),\r\n-                                          ),\r\n-                                          LimitedBox(\r\n-                                            maxWidth: MediaQuery.of(context)\r\n-                                                    .size\r\n-                                                    .width *\r\n-                                                0.3,\r\n-                                            child: Text(\r\n-                                              item.subtitle ?? \"\",\r\n-                                              maxLines: 2,\r\n-                                              style: const TextStyle(\r\n-                                                  color: Colors.grey,\r\n-                                                  fontWeight: FontWeight.bold,\r\n-                                                  fontSize: 13),\r\n-                                            ),\r\n-                                          ),\r\n-                                        ],\r\n-                                      ).paddingAll(\r\n-                                        MediaQuery.of(context).size.height *\r\n-                                            0.005,\r\n+                                              fontSize: 13),\r\n+                                        ),\r\n                                       ),\r\n-                                    ).paddingOnly(\r\n-                                        left:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.02),\r\n+                                    ],\r\n+                                  ).paddingAll(\r\n+                                    MediaQuery.of(context).size.height * 0.005,\r\n                                   ),\r\n-                                ],\r\n+                                ).paddingOnly(\r\n+                                    left: MediaQuery.of(context).size.width *\r\n+                                        0.02),\r\n                               ),\r\n-                            ),\r\n-                          ],\r\n+                            ],\r\n+                          ),\r\n                         ),\r\n-                      ),\r\n-                    ],\r\n+                      ],\r\n+                    ),\r\n                   ),\r\n-                );\r\n-              });\r\n-            },\r\n-          ),\r\n-        ],\r\n+                ],\r\n+              ),\r\n+            );\r\n+          });\r\n+        },\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746443347160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/widgets.dart';\r\n import 'package:get/get.dart';\r\n import 'package:nb_utils/nb_utils.dart';\r\n+import 'package:templering/screens/blog/component/adds.dart';\r\n import 'package:templering/utils/appscaffold.dart';\r\n import '../../../utils/color.dart';\r\n import 'blog_model.dart';\r\n import 'blogs_controller.dart';\r\n@@ -113,11 +114,12 @@\n                                   child: Column(\r\n                                     crossAxisAlignment:\r\n                                         CrossAxisAlignment.start,\r\n                                     children: [\r\n-                                       BannerAdWidget(\r\n-            adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n-          ),\r\n+                                      BannerAdWidget(\r\n+                                        adUnitId:\r\n+                                            'ca-app-pub-3940256099942544/6300978111',\r\n+                                      ),\r\n                                       Text(\r\n                                         item.title ?? \"\",\r\n                                         style: const TextStyle(\r\n                                           fontSize: 13,\r\n@@ -158,7 +160,10 @@\n             );\r\n           });\r\n         },\r\n       ),\r\n+    \r\n+    \r\n+    \r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746443384397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,147 +23,119 @@\n         style:\r\n             primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n       ),\r\n       body: ListView.builder(\r\n-        itemCount: blogsController.items.length,\r\n+        itemCount: blogsController.items.length +\r\n+            (blogsController.items.length ~/ 4),\r\n         itemBuilder: (context, index) {\r\n+          // Calculate real blog item index\r\n+          final actualIndex = index - (index ~/ 5);\r\n+\r\n+          // Every 5th item (after 4 items), show ad\r\n+          if ((index + 1) % 5 == 0) {\r\n+            return Padding(\r\n+              padding: const EdgeInsets.symmetric(vertical: 8),\r\n+              child: BannerAdWidget(\r\n+                adUnitId: 'ca-app-pub-3940256099942544/6300978111',\r\n+              ),\r\n+            );\r\n+          }\r\n+\r\n           return Obx(() {\r\n-            final item = blogsController.items[index];\r\n+            final item = blogsController.items[actualIndex];\r\n             return Padding(\r\n               padding:\r\n                   EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n-              child: Row(\r\n-                children: [\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      Get.to(\r\n-                        () => BlogDetailScreen(\r\n-                          subtitle: item.subtitle,\r\n-                          time: item.time,\r\n-                          image: item.image,\r\n-                          paragraph: item.paragraph,\r\n+              child: InkWell(\r\n+                onTap: () {\r\n+                  Get.to(() => BlogDetailScreen(\r\n+                        subtitle: item.subtitle,\r\n+                        time: item.time,\r\n+                        image: item.image,\r\n+                        paragraph: item.paragraph,\r\n+                      ));\r\n+                },\r\n+                child: Container(\r\n+                  height: MediaQuery.of(context).size.height * 0.12,\r\n+                  width: MediaQuery.of(context).size.width * 0.92,\r\n+                  decoration: BoxDecoration(\r\n+                    color: context.cardColor,\r\n+                    borderRadius: BorderRadius.circular(15),\r\n+                  ),\r\n+                  child: Row(\r\n+                    children: [\r\n+                      Hero(\r\n+                        tag: item.image ?? \"\",\r\n+                        child: SizedBox(\r\n+                          width: 100,\r\n+                          height: 100,\r\n+                          child: Image.network(\r\n+                            'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n+                                \"\",\r\n+                            fit: BoxFit.cover,\r\n+                            loadingBuilder: (context, child, loadingProgress) {\r\n+                              if (loadingProgress == null) return child;\r\n+                              return Center(\r\n+                                child: CircularProgressIndicator(\r\n+                                  value: loadingProgress.expectedTotalBytes !=\r\n+                                          null\r\n+                                      ? loadingProgress.cumulativeBytesLoaded /\r\n+                                          (loadingProgress.expectedTotalBytes ??\r\n+                                              1)\r\n+                                      : null,\r\n+                                ),\r\n+                              );\r\n+                            },\r\n+                            errorBuilder: (context, error, stackTrace) {\r\n+                              return const Center(\r\n+                                child: Icon(Icons.error,\r\n+                                    color: Colors.red, size: 40),\r\n+                              );\r\n+                            },\r\n+                          ),\r\n                         ),\r\n-                      );\r\n-                    },\r\n-                    child: Row(\r\n-                      children: [\r\n-                        Container(\r\n-                          height:\r\n-                              MediaQuery.of(context).size.height * 0.12, //100,\r\n-                          width:\r\n-                              MediaQuery.of(context).size.width * 0.92, //428,\r\n-                          decoration: BoxDecoration(\r\n-                            color: context.cardColor,\r\n-                            borderRadius: BorderRadius.circular(15),\r\n-                          ),\r\n-                          child: Row(\r\n+                      ).paddingOnly(bottom: 10),\r\n+                      Expanded(\r\n+                        child: Container(\r\n+                          width: MediaQuery.of(context).size.width * 0.6,\r\n+                          child: Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.start,\r\n                             children: [\r\n-                              Hero(\r\n-                                tag: item.image ??\r\n-                                    \"\", // Use null-aware operator to handle null image\r\n-                                child: SizedBox(\r\n-                                  width: 100,\r\n-                                  height: 100,\r\n-                                  child: Image.network(\r\n-                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n-                                        \"\", // Fallback to empty string if image is null\r\n-                                    fit: BoxFit.cover,\r\n-                                    loadingBuilder:\r\n-                                        (context, child, loadingProgress) {\r\n-                                      if (loadingProgress == null) {\r\n-                                        return child; // Show the image once it has loaded\r\n-                                      } else {\r\n-                                        return Center(\r\n-                                          // Display a loading indicator while the image loads\r\n-                                          child: CircularProgressIndicator(\r\n-                                            value: loadingProgress\r\n-                                                        .expectedTotalBytes !=\r\n-                                                    null\r\n-                                                ? loadingProgress\r\n-                                                        .cumulativeBytesLoaded /\r\n-                                                    (loadingProgress\r\n-                                                            .expectedTotalBytes ??\r\n-                                                        1)\r\n-                                                : null,\r\n-                                          ),\r\n-                                        );\r\n-                                      }\r\n-                                    },\r\n-                                    errorBuilder: (context, error, stackTrace) {\r\n-                                      return const Center(\r\n-                                        // Display an error icon or fallback widget in case of failure\r\n-                                        child: Icon(\r\n-                                          Icons.error,\r\n-                                          color: Colors.red,\r\n-                                          size: 40,\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                ).paddingOnly(bottom: 10),\r\n+                              Text(\r\n+                                item.title ?? \"\",\r\n+                                style: const TextStyle(\r\n+                                  fontSize: 13,\r\n+                                  color: adoptifyPrimaryColor,\r\n+                                  fontWeight: FontWeight.bold,\r\n+                                  fontStyle: FontStyle.italic,\r\n+                                ),\r\n                               ),\r\n-                              Expanded(\r\n-                                child: Container(\r\n-                                  width:\r\n-                                      MediaQuery.of(context).size.width * 0.6,\r\n-                                  decoration: const BoxDecoration(\r\n-                                    borderRadius: BorderRadius.only(\r\n-                                      topRight: Radius.circular(15),\r\n-                                      bottomRight: Radius.circular(15),\r\n-                                    ),\r\n+                              LimitedBox(\r\n+                                maxWidth:\r\n+                                    MediaQuery.of(context).size.width * 0.3,\r\n+                                child: Text(\r\n+                                  item.subtitle ?? \"\",\r\n+                                  maxLines: 2,\r\n+                                  style: const TextStyle(\r\n+                                    color: Colors.grey,\r\n+                                    fontWeight: FontWeight.bold,\r\n+                                    fontSize: 13,\r\n                                   ),\r\n-                                  child: Column(\r\n-                                    crossAxisAlignment:\r\n-                                        CrossAxisAlignment.start,\r\n-                                    children: [\r\n-                                      BannerAdWidget(\r\n-                                        adUnitId:\r\n-                                            'ca-app-pub-3940256099942544/6300978111',\r\n-                                      ),\r\n-                                      Text(\r\n-                                        item.title ?? \"\",\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 13,\r\n-                                          color: adoptifyPrimaryColor,\r\n-                                          fontWeight: FontWeight.bold,\r\n-                                          fontStyle: FontStyle.italic,\r\n-                                        ),\r\n-                                      ),\r\n-                                      LimitedBox(\r\n-                                        maxWidth:\r\n-                                            MediaQuery.of(context).size.width *\r\n-                                                0.3,\r\n-                                        child: Text(\r\n-                                          item.subtitle ?? \"\",\r\n-                                          maxLines: 2,\r\n-                                          style: const TextStyle(\r\n-                                              color: Colors.grey,\r\n-                                              fontWeight: FontWeight.bold,\r\n-                                              fontSize: 13),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ).paddingAll(\r\n-                                    MediaQuery.of(context).size.height * 0.005,\r\n-                                  ),\r\n-                                ).paddingOnly(\r\n-                                    left: MediaQuery.of(context).size.width *\r\n-                                        0.02),\r\n+                                ),\r\n                               ),\r\n                             ],\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n+                          ).paddingAll(\r\n+                              MediaQuery.of(context).size.height * 0.005),\r\n+                        ).paddingOnly(\r\n+                            left: MediaQuery.of(context).size.width * 0.02),\r\n+                      ),\r\n+                    ],\r\n                   ),\r\n-                ],\r\n+                ),\r\n               ),\r\n             );\r\n           });\r\n         },\r\n       ),\r\n-    \r\n-    \r\n-    \r\n     );\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1746442768855,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter/widgets.dart';\r\nimport 'package:get/get.dart';\r\nimport 'package:nb_utils/nb_utils.dart';\r\nimport 'package:templering/utils/appscaffold.dart';\r\nimport '../../../utils/color.dart';\r\nimport 'blog_model.dart';\r\nimport 'blogs_controller.dart';\r\nimport 'blogs_detail_screen.dart';\r\n\r\nclass BlogsviewAll extends StatelessWidget {\r\n  final List<BlogItem> items;\r\n\r\n  const BlogsviewAll({super.key, required this.items});\r\n@override\r\n  void initState() {\r\n    super.initState();\r\n    _initAd();\r\n  }\r\n\r\n  void _initAd() {\r\n    _bannerAd = BannerAd(\r\n      adUnitId:\r\n          'ca-app-pub-3940256099942544/6300978111', \r\n      request: AdRequest(),\r\n      size: AdSize.banner,\r\n      listener: BannerAdListener(\r\n        onAdLoaded: (ad) => setState(() => _isAdLoaded = true),\r\n        onAdFailedToLoad: (ad, error) {\r\n          ad.dispose();\r\n          log('Ad failed to load: ${error.message}');\r\n        },\r\n      ),\r\n    )..load();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _bannerAd?.dispose();\r\n    super.dispose();\r\n  }\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final BlogController blogsController = Get.find<BlogController>();\r\n    return AppScaffold(\r\n      appBarTitle: Text(\r\n        \"Blogs\",\r\n        style:\r\n            primaryTextStyle(color: black, weight: FontWeight.bold, size: 18),\r\n      ),\r\n      body: ListView.builder(\r\n        itemCount: blogsController.items.length,\r\n        itemBuilder: (context, index) {\r\n          return Obx(() {\r\n            final item = blogsController.items[index];\r\n            return Padding(\r\n              padding:\r\n                  EdgeInsets.all(MediaQuery.of(context).size.height * 0.008),\r\n              child: Row(\r\n                children: [\r\n                  InkWell(\r\n                    onTap: () {\r\n                      Get.to(\r\n                        () => BlogDetailScreen(\r\n                          subtitle: item.subtitle,\r\n                          time: item.time,\r\n                          image: item.image,\r\n                          paragraph: item.paragraph,\r\n                        ),\r\n                      );\r\n                    },\r\n                    child: Row(\r\n                      children: [\r\n                        Container(\r\n                          height:\r\n                              MediaQuery.of(context).size.height * 0.12, //100,\r\n                          width:\r\n                              MediaQuery.of(context).size.width * 0.92, //428,\r\n                          decoration: BoxDecoration(\r\n                            color: context.cardColor,\r\n                            borderRadius: BorderRadius.circular(15),\r\n                          ),\r\n                          child: Row(\r\n                            children: [\r\n                              Hero(\r\n                                tag: item.image ??\r\n                                    \"\", // Use null-aware operator to handle null image\r\n                                child: SizedBox(\r\n                                  width: 100,\r\n                                  height: 100,\r\n                                  child: Image.network(\r\n                                    'https://alarmclock.rukmanimfg.com/${item.image}' ??\r\n                                        \"\", // Fallback to empty string if image is null\r\n                                    fit: BoxFit.cover,\r\n                                    loadingBuilder:\r\n                                        (context, child, loadingProgress) {\r\n                                      if (loadingProgress == null) {\r\n                                        return child; // Show the image once it has loaded\r\n                                      } else {\r\n                                        return Center(\r\n                                          // Display a loading indicator while the image loads\r\n                                          child: CircularProgressIndicator(\r\n                                            value: loadingProgress\r\n                                                        .expectedTotalBytes !=\r\n                                                    null\r\n                                                ? loadingProgress\r\n                                                        .cumulativeBytesLoaded /\r\n                                                    (loadingProgress\r\n                                                            .expectedTotalBytes ??\r\n                                                        1)\r\n                                                : null,\r\n                                          ),\r\n                                        );\r\n                                      }\r\n                                    },\r\n                                    errorBuilder: (context, error, stackTrace) {\r\n                                      return const Center(\r\n                                        // Display an error icon or fallback widget in case of failure\r\n                                        child: Icon(\r\n                                          Icons.error,\r\n                                          color: Colors.red,\r\n                                          size: 40,\r\n                                        ),\r\n                                      );\r\n                                    },\r\n                                  ),\r\n                                ).paddingOnly(bottom: 10),\r\n                              ),\r\n                              Expanded(\r\n                                child: Container(\r\n                                  width:\r\n                                      MediaQuery.of(context).size.width * 0.6,\r\n                                  decoration: const BoxDecoration(\r\n                                    borderRadius: BorderRadius.only(\r\n                                      topRight: Radius.circular(15),\r\n                                      bottomRight: Radius.circular(15),\r\n                                    ),\r\n                                  ),\r\n                                  child: Column(\r\n                                    crossAxisAlignment:\r\n                                        CrossAxisAlignment.start,\r\n                                    children: [\r\n                                      Text(\r\n                                        item.title ?? \"\",\r\n                                        style: const TextStyle(\r\n                                          fontSize: 13,\r\n                                          color: adoptifyPrimaryColor,\r\n                                          fontWeight: FontWeight.bold,\r\n                                          fontStyle: FontStyle.italic,\r\n                                        ),\r\n                                      ),\r\n                                      LimitedBox(\r\n                                        maxWidth:\r\n                                            MediaQuery.of(context).size.width *\r\n                                                0.3,\r\n                                        child: Text(\r\n                                          item.subtitle ?? \"\",\r\n                                          maxLines: 2,\r\n                                          style: const TextStyle(\r\n                                              color: Colors.grey,\r\n                                              fontWeight: FontWeight.bold,\r\n                                              fontSize: 13),\r\n                                        ),\r\n                                      ),\r\n                                    ],\r\n                                  ).paddingAll(\r\n                                    MediaQuery.of(context).size.height * 0.005,\r\n                                  ),\r\n                                ).paddingOnly(\r\n                                    left: MediaQuery.of(context).size.width *\r\n                                        0.02),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}