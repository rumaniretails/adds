{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 50,
            "patches": [
                {
                    "date": 1746441059971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746441245378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,10 +184,10 @@\n     },\r\n     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n   );\r\n   await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n \r\n+\r\n   runApp(const MyApp());\r\n }\r\n \r\n class MyApp extends StatefulWidget {\r\n"
                },
                {
                    "date": 1746441354398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,438 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746444860790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n }\r\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n+  await SharedPreferences.getInstance(); /\r\n   await _configureLocalTimeZone();\r\n \r\n   const AndroidInitializationSettings initializationSettingsAndroid =\r\n       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n@@ -435,441 +435,4 @@\n       home: const AdoptifySplashscreen(),\r\n     );\r\n   }\r\n }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746444893675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,363 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance(); \r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746445002094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,437 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746445007551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,438 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance(); \r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446392560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,84 +254,10 @@\n       });\r\n     }\r\n   }\r\n \r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n+ \r\n \r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n   @override\r\n   void dispose() {\r\n     selectNotificationStream.close();\r\n     super.dispose();\r\n@@ -435,1242 +361,4 @@\n       home: const AdoptifySplashscreen(),\r\n     );\r\n   }\r\n }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); \r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); /\r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746446461566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,10 @@\n   bool _notificationsEnabled = false;\r\n \r\n   @override\r\n   void initState() {\r\n+      await SharedPreferences.getInstance();\r\n+\r\n     super.initState();\r\n     _isAndroidPermissionGranted();\r\n     _requestPermissions();\r\n     _scheduleNotificationAt12();\r\n"
                },
                {
                    "date": 1746446480370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance(); \r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+  await SharedPreferences.getInstance();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    \r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+ \r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446509583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n }\r\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); \r\n+  await SharedPreferences.getInstance();\r\n   await _configureLocalTimeZone();\r\n \r\n   const AndroidInitializationSettings initializationSettingsAndroid =\r\n       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n@@ -200,12 +200,11 @@\n }\r\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n-\r\n+ bool _hasSeenUserForm = false;\r\n   @override\r\n   void initState() {\r\n-    \r\n     super.initState();\r\n     _isAndroidPermissionGranted();\r\n     _requestPermissions();\r\n     _scheduleNotificationAt12();\r\n@@ -256,10 +255,8 @@\n       });\r\n     }\r\n   }\r\n \r\n- \r\n-\r\n   @override\r\n   void dispose() {\r\n     selectNotificationStream.close();\r\n     super.dispose();\r\n@@ -363,370 +360,4 @@\n       home: const AdoptifySplashscreen(),\r\n     );\r\n   }\r\n }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); \r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-      await SharedPreferences.getInstance();\r\n-\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n- \r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746446541585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,10 @@\n     _isAndroidPermissionGranted();\r\n     _requestPermissions();\r\n     _scheduleNotificationAt12();\r\n     _scheduleNotificationAt7();\r\n+    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+    _hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n   }\r\n \r\n   Future<void> _isAndroidPermissionGranted() async {\r\n     if (Platform.isAndroid) {\r\n"
                },
                {
                    "date": 1746446591177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,10 +208,9 @@\n     _isAndroidPermissionGranted();\r\n     _requestPermissions();\r\n     _scheduleNotificationAt12();\r\n     _scheduleNotificationAt7();\r\n-    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    _hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n   }\r\n \r\n   Future<void> _isAndroidPermissionGranted() async {\r\n     if (Platform.isAndroid) {\r\n"
                },
                {
                    "date": 1746446596417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,10 +185,10 @@\n     },\r\n     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n   );\r\n   await checkAndRunApi();\r\n-  await SharedPreferences.getInstance();\r\n \r\n+\r\n   MobileAds.instance.initialize();\r\n   runApp(const MyApp());\r\n }\r\n \r\n"
                },
                {
                    "date": 1746446606350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n }\r\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n+  await SharedPreferences.getInstance(); \r\n   await _configureLocalTimeZone();\r\n \r\n   const AndroidInitializationSettings initializationSettingsAndroid =\r\n       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n@@ -186,9 +186,8 @@\n     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n   );\r\n   await checkAndRunApi();\r\n \r\n-\r\n   MobileAds.instance.initialize();\r\n   runApp(const MyApp());\r\n }\r\n \r\n@@ -200,17 +199,16 @@\n }\r\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n- bool _hasSeenUserForm = false;\r\n+\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     _isAndroidPermissionGranted();\r\n     _requestPermissions();\r\n     _scheduleNotificationAt12();\r\n     _scheduleNotificationAt7();\r\n-\r\n   }\r\n \r\n   Future<void> _isAndroidPermissionGranted() async {\r\n     if (Platform.isAndroid) {\r\n@@ -256,8 +254,84 @@\n       });\r\n     }\r\n   }\r\n \r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n   @override\r\n   void dispose() {\r\n     selectNotificationStream.close();\r\n     super.dispose();\r\n"
                },
                {
                    "date": 1746446611573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,437 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446617675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,438 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  // ignore: avoid_print\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    // ignore: avoid_print\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    // Mark as not the first launch\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    // Run the API\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance(); \r\n+  await _configureLocalTimeZone();\r\n+\r\n+  const AndroidInitializationSettings initializationSettingsAndroid =\r\n+      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+      <DarwinNotificationCategory>[\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryText,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.text(\r\n+          'text_1',\r\n+          'Action 1',\r\n+          buttonTitle: 'Send',\r\n+          placeholder: 'Placeholder',\r\n+        ),\r\n+      ],\r\n+    ),\r\n+    DarwinNotificationCategory(\r\n+      darwinNotificationCategoryPlain,\r\n+      actions: <DarwinNotificationAction>[\r\n+        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_2',\r\n+          'Action 2 (destructive)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.destructive,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          navigationActionId,\r\n+          'Action 3 (foreground)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.foreground,\r\n+          },\r\n+        ),\r\n+        DarwinNotificationAction.plain(\r\n+          'id_4',\r\n+          'Action 4 (auth required)',\r\n+          options: <DarwinNotificationActionOption>{\r\n+            DarwinNotificationActionOption.authenticationRequired,\r\n+          },\r\n+        ),\r\n+      ],\r\n+      options: <DarwinNotificationCategoryOption>{\r\n+        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+      },\r\n+    )\r\n+  ];\r\n+\r\n+  final DarwinInitializationSettings initializationSettingsDarwin =\r\n+      DarwinInitializationSettings(\r\n+    requestAlertPermission: false,\r\n+    requestBadgePermission: false,\r\n+    requestSoundPermission: false,\r\n+    notificationCategories: darwinNotificationCategories,\r\n+  );\r\n+  final LinuxInitializationSettings initializationSettingsLinux =\r\n+      LinuxInitializationSettings(\r\n+    defaultActionName: 'Open notification',\r\n+    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+  );\r\n+  final InitializationSettings initializationSettings = InitializationSettings(\r\n+    android: initializationSettingsAndroid,\r\n+    iOS: initializationSettingsDarwin,\r\n+    macOS: initializationSettingsDarwin,\r\n+    linux: initializationSettingsLinux,\r\n+  );\r\n+  await flutterLocalNotificationsPlugin.initialize(\r\n+    initializationSettings,\r\n+    onDidReceiveNotificationResponse:\r\n+        (NotificationResponse notificationResponse) {\r\n+      switch (notificationResponse.notificationResponseType) {\r\n+        case NotificationResponseType.selectedNotification:\r\n+          selectNotificationStream.add(notificationResponse.payload);\r\n+          break;\r\n+        case NotificationResponseType.selectedNotificationAction:\r\n+          if (notificationResponse.actionId == navigationActionId) {\r\n+            selectNotificationStream.add(notificationResponse.payload);\r\n+          }\r\n+          break;\r\n+      }\r\n+    },\r\n+    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+  );\r\n+  await checkAndRunApi();\r\n+\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _isAndroidPermissionGranted();\r\n+    _requestPermissions();\r\n+    _scheduleNotificationAt12();\r\n+    _scheduleNotificationAt7();\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Future<void> _cancelAllNotifications() async {\r\n+  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+  // }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+  // try {\r\n+  //   var request = http.Request('GET',\r\n+  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //   http.StreamedResponse response = await request.send();\r\n+\r\n+  //   if (response.statusCode == 200) {\r\n+  //     // Parse the response\r\n+  //     final String responseBody = await response.stream.bytesToString();\r\n+  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //     if (responseData['success'] == true &&\r\n+  //         responseData['alarms'] != null &&\r\n+  //         responseData['alarms'].isNotEmpty) {\r\n+  //       final String alarmTime =\r\n+  //           responseData['alarms'][0]['time']; // Get the time\r\n+  //       final List<String> timeParts =\r\n+  //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //       final int hour = int.parse(timeParts[0]);\r\n+  //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //       // Schedule notification using the fetched time\r\n+  //      _scheduleNotificationAt();\r\n+  //     } else {\r\n+  //       throw Exception(\"No alarms found in the API response.\");\r\n+  //     }\r\n+  //   } else {\r\n+  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //   }\r\n+  // } catch (e) {\r\n+  //   print(\"Error fetching or scheduling alarm: $e\");\r\n+  // }\r\n+//  }\r\n+\r\n+  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+  //   try {\r\n+  //     var request = http.Request('GET',\r\n+  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+  //     http.StreamedResponse response = await request.send();\r\n+\r\n+  //     if (response.statusCode == 200) {\r\n+  //       // Parse the response\r\n+  //       final String responseBody = await response.stream.bytesToString();\r\n+  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+  //       if (responseData['success'] == true &&\r\n+  //           responseData['alarms'] != null &&\r\n+  //           responseData['alarms'].isNotEmpty) {\r\n+  //         final String alarmTime =\r\n+  //             responseData['alarms'][0]['time']; // Get the time\r\n+  //         final List<String> timeParts =\r\n+  //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+  //         final int hour = int.parse(timeParts[0]);\r\n+  //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+  //         // Schedule notification using the fetched time\r\n+  //         _scheduleNotificationAt12(hour, minute);\r\n+  //       } else {\r\n+  //         throw Exception(\"No alarms found in the API response.\");\r\n+  //       }\r\n+  //     } else {\r\n+  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+  //     }\r\n+  //   } catch (e) {\r\n+  //     print(\"Error fetching or scheduling alarm: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AdoptifySplashscreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446630659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,437 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n"
                },
                {
                    "date": 1746446635974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,726 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  bool _hasSeenUserForm = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+    _hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      // Show form if not seen, else go to splash or home\r\n+      home: _hasSeenUserForm\r\n+          ? const AdoptifySplashscreen()\r\n+          : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446801407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,810 +573,8 @@\n \r\n   Future<void> _isAndroidPermissionGranted() async {\r\n     if (Platform.isAndroid) {\r\n       final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      // Show form if not seen, else go to splash or home\r\n-      home: _hasSeenUserForm\r\n-          ? const AdoptifySplashscreen()\r\n-          : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); \r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n               .resolvePlatformSpecificImplementation<\r\n                   AndroidFlutterLocalNotificationsPlugin>()\r\n               ?.areNotificationsEnabled() ??\r\n           false;\r\n@@ -1417,84 +615,8 @@\n       });\r\n     }\r\n   }\r\n \r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n   @override\r\n   void dispose() {\r\n     selectNotificationStream.close();\r\n     super.dispose();\r\n@@ -1587,890 +709,20 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n     }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n \r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n     return GetMaterialApp(\r\n       title: 'Flutter Demo',\r\n       debugShowCheckedModeBanner: false,\r\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-      home: const AdoptifySplashscreen(),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  // ignore: avoid_print\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    // ignore: avoid_print\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    // Mark as not the first launch\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    // Run the API\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance(); \r\n-  await _configureLocalTimeZone();\r\n-\r\n-  const AndroidInitializationSettings initializationSettingsAndroid =\r\n-      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-      <DarwinNotificationCategory>[\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryText,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.text(\r\n-          'text_1',\r\n-          'Action 1',\r\n-          buttonTitle: 'Send',\r\n-          placeholder: 'Placeholder',\r\n-        ),\r\n-      ],\r\n-    ),\r\n-    DarwinNotificationCategory(\r\n-      darwinNotificationCategoryPlain,\r\n-      actions: <DarwinNotificationAction>[\r\n-        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_2',\r\n-          'Action 2 (destructive)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.destructive,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          navigationActionId,\r\n-          'Action 3 (foreground)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.foreground,\r\n-          },\r\n-        ),\r\n-        DarwinNotificationAction.plain(\r\n-          'id_4',\r\n-          'Action 4 (auth required)',\r\n-          options: <DarwinNotificationActionOption>{\r\n-            DarwinNotificationActionOption.authenticationRequired,\r\n-          },\r\n-        ),\r\n-      ],\r\n-      options: <DarwinNotificationCategoryOption>{\r\n-        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-      },\r\n-    )\r\n-  ];\r\n-\r\n-  final DarwinInitializationSettings initializationSettingsDarwin =\r\n-      DarwinInitializationSettings(\r\n-    requestAlertPermission: false,\r\n-    requestBadgePermission: false,\r\n-    requestSoundPermission: false,\r\n-    notificationCategories: darwinNotificationCategories,\r\n-  );\r\n-  final LinuxInitializationSettings initializationSettingsLinux =\r\n-      LinuxInitializationSettings(\r\n-    defaultActionName: 'Open notification',\r\n-    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-  );\r\n-  final InitializationSettings initializationSettings = InitializationSettings(\r\n-    android: initializationSettingsAndroid,\r\n-    iOS: initializationSettingsDarwin,\r\n-    macOS: initializationSettingsDarwin,\r\n-    linux: initializationSettingsLinux,\r\n-  );\r\n-  await flutterLocalNotificationsPlugin.initialize(\r\n-    initializationSettings,\r\n-    onDidReceiveNotificationResponse:\r\n-        (NotificationResponse notificationResponse) {\r\n-      switch (notificationResponse.notificationResponseType) {\r\n-        case NotificationResponseType.selectedNotification:\r\n-          selectNotificationStream.add(notificationResponse.payload);\r\n-          break;\r\n-        case NotificationResponseType.selectedNotificationAction:\r\n-          if (notificationResponse.actionId == navigationActionId) {\r\n-            selectNotificationStream.add(notificationResponse.payload);\r\n-          }\r\n-          break;\r\n-      }\r\n-    },\r\n-    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-  );\r\n-  await checkAndRunApi();\r\n-\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _isAndroidPermissionGranted();\r\n-    _requestPermissions();\r\n-    _scheduleNotificationAt12();\r\n-    _scheduleNotificationAt7();\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Future<void> _cancelAllNotifications() async {\r\n-  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-  // }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-  // try {\r\n-  //   var request = http.Request('GET',\r\n-  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //   http.StreamedResponse response = await request.send();\r\n-\r\n-  //   if (response.statusCode == 200) {\r\n-  //     // Parse the response\r\n-  //     final String responseBody = await response.stream.bytesToString();\r\n-  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //     if (responseData['success'] == true &&\r\n-  //         responseData['alarms'] != null &&\r\n-  //         responseData['alarms'].isNotEmpty) {\r\n-  //       final String alarmTime =\r\n-  //           responseData['alarms'][0]['time']; // Get the time\r\n-  //       final List<String> timeParts =\r\n-  //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //       final int hour = int.parse(timeParts[0]);\r\n-  //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //       // Schedule notification using the fetched time\r\n-  //      _scheduleNotificationAt();\r\n-  //     } else {\r\n-  //       throw Exception(\"No alarms found in the API response.\");\r\n-  //     }\r\n-  //   } else {\r\n-  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //   }\r\n-  // } catch (e) {\r\n-  //   print(\"Error fetching or scheduling alarm: $e\");\r\n-  // }\r\n-//  }\r\n-\r\n-  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-  //   try {\r\n-  //     var request = http.Request('GET',\r\n-  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-  //     http.StreamedResponse response = await request.send();\r\n-\r\n-  //     if (response.statusCode == 200) {\r\n-  //       // Parse the response\r\n-  //       final String responseBody = await response.stream.bytesToString();\r\n-  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-  //       if (responseData['success'] == true &&\r\n-  //           responseData['alarms'] != null &&\r\n-  //           responseData['alarms'].isNotEmpty) {\r\n-  //         final String alarmTime =\r\n-  //             responseData['alarms'][0]['time']; // Get the time\r\n-  //         final List<String> timeParts =\r\n-  //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-  //         final int hour = int.parse(timeParts[0]);\r\n-  //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-  //         // Schedule notification using the fetched time\r\n-  //         _scheduleNotificationAt12(hour, minute);\r\n-  //       } else {\r\n-  //         throw Exception(\"No alarms found in the API response.\");\r\n-  //       }\r\n-  //     } else {\r\n-  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-  //     }\r\n-  //   } catch (e) {\r\n-  //     print(\"Error fetching or scheduling alarm: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AdoptifySplashscreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746446813720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -706,9 +706,9 @@\n       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n     }\r\n     return scheduledDate;\r\n   }\r\n-\r\n+  final bool hasSeenUserForm;\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     if (_isLoading) {\r\n       return const MaterialApp(\r\n"
                },
                {
                    "date": 1746446825321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,8 +446,9 @@\n import 'package:get/get.dart';\r\n import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n import 'package:templering/screens/userinfo.dart';\r\n import 'package:timezone/data/latest_all.dart' as tz;\r\n import 'package:timezone/timezone.dart' as tz;\r\n import 'package:http/http.dart' as http;\r\n"
                },
                {
                    "date": 1746446837367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -549,10 +549,10 @@\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n   bool _isLoading = true;\r\n-  bool _hasSeenUserForm = false;\r\n \r\n+\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     _initApp();\r\n"
                },
                {
                    "date": 1746446842617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -564,9 +564,9 @@\n     await _scheduleNotificationAt12();\r\n     await _scheduleNotificationAt7();\r\n \r\n     final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    _hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+    h = prefs.getBool('hasSeenUserForm') ?? false;\r\n \r\n     setState(() {\r\n       _isLoading = false;\r\n     });\r\n"
                },
                {
                    "date": 1746446922362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,730 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  final bool hasSeenUserForm;\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446935614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,730 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool? hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  final bool hasSeenUserForm;\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446948322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,729 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746446956528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -549,9 +549,8 @@\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n   bool _isLoading = true;\r\n-  final bool hasSeenUserForm;\r\n \r\n \r\n   @override\r\n   void initState() {\r\n@@ -726,2193 +725,4 @@\n       home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-  final bool? hasSeenUserForm;\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  final bool hasSeenUserForm;\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-  final bool hasSeenUserForm;\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  final bool hasSeenUserForm;\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    h = prefs.getBool('hasSeenUserForm') ?? false;\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  final bool hasSeenUserForm;\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746446983266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,729 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+  final prefs = await SharedPreferences.getInstance();\r\n+  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746447000116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,728 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  await SharedPreferences.getInstance();\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746447007852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,729 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  final prefs = await SharedPreferences.getInstance();\r\n+  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  const MyApp({super.key});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+  final bool hasSeenUserForm;\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746447019608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -550,740 +550,12 @@\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n   bool _isLoading = true;\r\n-  final bool hasSeenUserForm;\r\n \r\n \r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n \r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n   @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-  final bool hasSeenUserForm;\r\n-\r\n-\r\n-  @override\r\n   void initState() {\r\n     super.initState();\r\n     _initApp();\r\n   }\r\n@@ -1454,1461 +726,4 @@\n       home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-  final bool hasSeenUserForm;\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-  final prefs = await SharedPreferences.getInstance();\r\n-  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  await SharedPreferences.getInstance();\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  const MyApp({super.key});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-    hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746447050200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -542,8 +542,9 @@\n   runApp(const MyApp());\r\n }\r\n \r\n class MyApp extends StatefulWidget {\r\n+    final bool hasSeenUserForm;\r\n   const MyApp({super.key});\r\n   @override\r\n   State<MyApp> createState() => _MyAppState();\r\n }\r\n"
                },
                {
                    "date": 1746447056703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -543,9 +543,9 @@\n }\r\n \r\n class MyApp extends StatefulWidget {\r\n     final bool hasSeenUserForm;\r\n-  const MyApp({super.key});\r\n+ const MyApp({super.key, required this.hasSeenUserForm});\r\n   @override\r\n   State<MyApp> createState() => _MyAppState();\r\n }\r\n \r\n"
                },
                {
                    "date": 1746447078633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,9 +538,9 @@\n   final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n   await _configureLocalTimeZone();\r\n   await checkAndRunApi();\r\n   MobileAds.instance.initialize();\r\n-  runApp(const MyApp());\r\n+ runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n }\r\n \r\n class MyApp extends StatefulWidget {\r\n     final bool hasSeenUserForm;\r\n"
                },
                {
                    "date": 1746447095847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -723,8 +723,8 @@\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-      home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+      home: hasSeenUserForm  ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746447108333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -723,8 +723,8 @@\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-      home: hasSeenUserForm  ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746447171864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,10 +538,9 @@\n   final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n   await _configureLocalTimeZone();\r\n   await checkAndRunApi();\r\n   MobileAds.instance.initialize();\r\n- runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n-}\r\n+  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));}\r\n \r\n class MyApp extends StatefulWidget {\r\n     final bool hasSeenUserForm;\r\n  const MyApp({super.key, required this.hasSeenUserForm});\r\n"
                },
                {
                    "date": 1746447214261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,8 +722,8 @@\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-    home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    home: h ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746447227855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,8 +722,8 @@\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-    home: h ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746447258467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,729 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  final prefs = await SharedPreferences.getInstance();\r\n+  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+    final bool hasSeenUserForm;\r\n+ const MyApp({super.key, required this.hasSeenUserForm});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+\r\n+\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const MaterialApp(\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+    home: .hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746447375826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,23 +538,22 @@\n   final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n   await _configureLocalTimeZone();\r\n   await checkAndRunApi();\r\n   MobileAds.instance.initialize();\r\n-  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));}\r\n+  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n+}\r\n \r\n class MyApp extends StatefulWidget {\r\n-    final bool hasSeenUserForm;\r\n- const MyApp({super.key, required this.hasSeenUserForm});\r\n+  final bool hasSeenUserForm;\r\n+  const MyApp({super.key, required this.hasSeenUserForm});\r\n   @override\r\n   State<MyApp> createState() => _MyAppState();\r\n }\r\n \r\n class _MyAppState extends State<MyApp> {\r\n   bool _notificationsEnabled = false;\r\n   bool _isLoading = true;\r\n \r\n-\r\n-\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     _initApp();\r\n@@ -565,10 +564,8 @@\n     await _requestPermissions();\r\n     await _scheduleNotificationAt12();\r\n     await _scheduleNotificationAt7();\r\n \r\n-\r\n-\r\n     setState(() {\r\n       _isLoading = false;\r\n     });\r\n   }\r\n@@ -708,741 +705,13 @@\n       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n     }\r\n     return scheduledDate;\r\n   }\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const MaterialApp(\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n \r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-    home: .hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  final prefs = await SharedPreferences.getInstance();\r\n-  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-    final bool hasSeenUserForm;\r\n- const MyApp({super.key, required this.hasSeenUserForm});\r\n   @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-\r\n-\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n     if (_isLoading) {\r\n-      return const MaterialApp(\r\n+      return const Get(\r\n           home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n     }\r\n \r\n     return GetMaterialApp(\r\n@@ -1451,8 +720,10 @@\n       theme: ThemeData(\r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n-    home: hasSeenUserForm ? const HomeScreen() : const UserInfoFormScreen(),\r\n+      home: widget.hasSeenUserForm\r\n+          ? const HomeScreen()\r\n+          : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746447400700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,9 +709,10 @@\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     if (_isLoading) {\r\n-      return const Get(\r\n+      return const GetMaterialApp(\r\n+        v\r\n           home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n     }\r\n \r\n     return GetMaterialApp(\r\n"
                },
                {
                    "date": 1746447407367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,9 +710,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     if (_isLoading) {\r\n       return const GetMaterialApp(\r\n-        v\r\n+        debugShowCheckedModeBanner: fasle,\r\n           home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n     }\r\n \r\n     return GetMaterialApp(\r\n"
                },
                {
                    "date": 1746450009995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,9 +710,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     if (_isLoading) {\r\n       return const GetMaterialApp(\r\n-        debugShowCheckedModeBanner: fasle,\r\n+          debugShowCheckedModeBanner: false,\r\n           home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n     }\r\n \r\n     return GetMaterialApp(\r\n@@ -722,9 +722,9 @@\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n       ),\r\n       home: widget.hasSeenUserForm\r\n-          ? const HomeScreen()\r\n+          ? const PlansheetsLogsScreen()\r\n           : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746450018346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,731 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  final prefs = await SharedPreferences.getInstance();\r\n+  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  final bool hasSeenUserForm;\r\n+  const MyApp({super.key, required this.hasSeenUserForm});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const GetMaterialApp(\r\n+          debugShowCheckedModeBanner: false,\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: widget.hasSeenUserForm\r\n+          ? const HomeScreen()\r\n+          ? const HomeScreen()\r\n+          : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746450026413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,731 @@\n+// import 'dart:async';\r\n+// import 'dart:io';\r\n+\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+// import 'package:flutter_timezone/flutter_timezone.dart';\r\n+// import 'package:get/get.dart';\r\n+// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+// import 'package:shared_preferences/shared_preferences.dart';\r\n+// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+// import 'package:timezone/data/latest_all.dart' as tz;\r\n+// import 'package:timezone/timezone.dart' as tz;\r\n+// import 'package:http/http.dart' as http;\r\n+\r\n+// int id = 0;\r\n+\r\n+// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+//     FlutterLocalNotificationsPlugin();\r\n+\r\n+// final StreamController<String?> selectNotificationStream =\r\n+//     StreamController<String?>.broadcast();\r\n+\r\n+// const MethodChannel platform =\r\n+//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+// const String portName = 'notification_send_port';\r\n+\r\n+// class ReceivedNotification {\r\n+//   ReceivedNotification({\r\n+//     required this.id,\r\n+//     required this.title,\r\n+//     required this.body,\r\n+//     required this.payload,\r\n+//   });\r\n+\r\n+//   final int id;\r\n+//   final String? title;\r\n+//   final String? body;\r\n+//   final String? payload;\r\n+// }\r\n+\r\n+// String? selectedNotificationPayload;\r\n+\r\n+// const String urlLaunchActionId = 'id_1';\r\n+// const String navigationActionId = 'id_3';\r\n+// const String darwinNotificationCategoryText = 'textCategory';\r\n+// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+// @pragma('vm:entry-point')\r\n+// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+//   // ignore: avoid_print\r\n+//   print('notification(${notificationResponse.id}) action tapped: '\r\n+//       '${notificationResponse.actionId} with'\r\n+//       ' payload: ${notificationResponse.payload}');\r\n+//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+//     // ignore: avoid_print\r\n+//     print(\r\n+//         'notification action tapped with input: ${notificationResponse.input}');\r\n+//   }\r\n+// }\r\n+\r\n+// Future<void> _configureLocalTimeZone() async {\r\n+//   if (kIsWeb || Platform.isLinux) {\r\n+//     return;\r\n+//   }\r\n+//   tz.initializeTimeZones();\r\n+//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+// }\r\n+\r\n+// Future<void> checkAndRunApi() async {\r\n+//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+//   if (isFirstLaunch) {\r\n+//     // Mark as not the first launch\r\n+//     await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+//     // Run the API\r\n+//     try {\r\n+//       var request = http.Request(\r\n+//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+//       http.StreamedResponse response = await request.send();\r\n+\r\n+//       if (response.statusCode == 200) {\r\n+//         print(await response.stream.bytesToString());\r\n+//       } else {\r\n+//         print('Error: ${response.reasonPhrase}');\r\n+//       }\r\n+//     } catch (e) {\r\n+//       print('API Error: $e');\r\n+//     }\r\n+//   } else {\r\n+//     print('API call skipped, not the first launch.');\r\n+//   }\r\n+// }\r\n+\r\n+// void main() async {\r\n+//   WidgetsFlutterBinding.ensureInitialized();\r\n+//   await _configureLocalTimeZone();\r\n+\r\n+//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n+//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n+\r\n+//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n+//       <DarwinNotificationCategory>[\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryText,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.text(\r\n+//           'text_1',\r\n+//           'Action 1',\r\n+//           buttonTitle: 'Send',\r\n+//           placeholder: 'Placeholder',\r\n+//         ),\r\n+//       ],\r\n+//     ),\r\n+//     DarwinNotificationCategory(\r\n+//       darwinNotificationCategoryPlain,\r\n+//       actions: <DarwinNotificationAction>[\r\n+//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_2',\r\n+//           'Action 2 (destructive)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.destructive,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           navigationActionId,\r\n+//           'Action 3 (foreground)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.foreground,\r\n+//           },\r\n+//         ),\r\n+//         DarwinNotificationAction.plain(\r\n+//           'id_4',\r\n+//           'Action 4 (auth required)',\r\n+//           options: <DarwinNotificationActionOption>{\r\n+//             DarwinNotificationActionOption.authenticationRequired,\r\n+//           },\r\n+//         ),\r\n+//       ],\r\n+//       options: <DarwinNotificationCategoryOption>{\r\n+//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n+//       },\r\n+//     )\r\n+//   ];\r\n+\r\n+//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n+//       DarwinInitializationSettings(\r\n+//     requestAlertPermission: false,\r\n+//     requestBadgePermission: false,\r\n+//     requestSoundPermission: false,\r\n+//     notificationCategories: darwinNotificationCategories,\r\n+//   );\r\n+//   final LinuxInitializationSettings initializationSettingsLinux =\r\n+//       LinuxInitializationSettings(\r\n+//     defaultActionName: 'Open notification',\r\n+//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n+//   );\r\n+//   final InitializationSettings initializationSettings = InitializationSettings(\r\n+//     android: initializationSettingsAndroid,\r\n+//     iOS: initializationSettingsDarwin,\r\n+//     macOS: initializationSettingsDarwin,\r\n+//     linux: initializationSettingsLinux,\r\n+//   );\r\n+//   await flutterLocalNotificationsPlugin.initialize(\r\n+//     initializationSettings,\r\n+//     onDidReceiveNotificationResponse:\r\n+//         (NotificationResponse notificationResponse) {\r\n+//       switch (notificationResponse.notificationResponseType) {\r\n+//         case NotificationResponseType.selectedNotification:\r\n+//           selectNotificationStream.add(notificationResponse.payload);\r\n+//           break;\r\n+//         case NotificationResponseType.selectedNotificationAction:\r\n+//           if (notificationResponse.actionId == navigationActionId) {\r\n+//             selectNotificationStream.add(notificationResponse.payload);\r\n+//           }\r\n+//           break;\r\n+//       }\r\n+//     },\r\n+//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n+//   );\r\n+//   await checkAndRunApi();\r\n+\r\n+//   MobileAds.instance.initialize();\r\n+//   runApp(const MyApp());\r\n+// }\r\n+\r\n+// class MyApp extends StatefulWidget {\r\n+//   const MyApp({super.key});\r\n+\r\n+//   @override\r\n+//   State<MyApp> createState() => _MyAppState();\r\n+// }\r\n+\r\n+// class _MyAppState extends State<MyApp> {\r\n+//   bool _notificationsEnabled = false;\r\n+\r\n+//   @override\r\n+//   void initState() {\r\n+//     super.initState();\r\n+//     _isAndroidPermissionGranted();\r\n+//     _requestPermissions();\r\n+//     _scheduleNotificationAt12();\r\n+//     _scheduleNotificationAt7();\r\n+//   }\r\n+\r\n+//   Future<void> _isAndroidPermissionGranted() async {\r\n+//     if (Platform.isAndroid) {\r\n+//       final bool granted = await flutterLocalNotificationsPlugin\r\n+//               .resolvePlatformSpecificImplementation<\r\n+//                   AndroidFlutterLocalNotificationsPlugin>()\r\n+//               ?.areNotificationsEnabled() ??\r\n+//           false;\r\n+\r\n+//       setState(() {\r\n+//         _notificationsEnabled = granted;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   Future<void> _requestPermissions() async {\r\n+//     if (Platform.isIOS || Platform.isMacOS) {\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               IOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//       await flutterLocalNotificationsPlugin\r\n+//           .resolvePlatformSpecificImplementation<\r\n+//               MacOSFlutterLocalNotificationsPlugin>()\r\n+//           ?.requestPermissions(\r\n+//             alert: true,\r\n+//             badge: true,\r\n+//             sound: true,\r\n+//           );\r\n+//     } else if (Platform.isAndroid) {\r\n+//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+//               AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+//       final bool? grantedNotificationPermission =\r\n+//           await androidImplementation?.requestNotificationsPermission();\r\n+//       setState(() {\r\n+//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+//       });\r\n+//     }\r\n+//   }\r\n+\r\n+//   // Future<void> _cancelAllNotifications() async {\r\n+//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n+//   // }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n+//   // try {\r\n+//   //   var request = http.Request('GET',\r\n+//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //   http.StreamedResponse response = await request.send();\r\n+\r\n+//   //   if (response.statusCode == 200) {\r\n+//   //     // Parse the response\r\n+//   //     final String responseBody = await response.stream.bytesToString();\r\n+//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //     if (responseData['success'] == true &&\r\n+//   //         responseData['alarms'] != null &&\r\n+//   //         responseData['alarms'].isNotEmpty) {\r\n+//   //       final String alarmTime =\r\n+//   //           responseData['alarms'][0]['time']; // Get the time\r\n+//   //       final List<String> timeParts =\r\n+//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //       final int hour = int.parse(timeParts[0]);\r\n+//   //       final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //       // Schedule notification using the fetched time\r\n+//   //      _scheduleNotificationAt();\r\n+//   //     } else {\r\n+//   //       throw Exception(\"No alarms found in the API response.\");\r\n+//   //     }\r\n+//   //   } else {\r\n+//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //   }\r\n+//   // } catch (e) {\r\n+//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n+//   // }\r\n+// //  }\r\n+\r\n+//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n+//   //   try {\r\n+//   //     var request = http.Request('GET',\r\n+//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n+\r\n+//   //     http.StreamedResponse response = await request.send();\r\n+\r\n+//   //     if (response.statusCode == 200) {\r\n+//   //       // Parse the response\r\n+//   //       final String responseBody = await response.stream.bytesToString();\r\n+//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n+\r\n+//   //       if (responseData['success'] == true &&\r\n+//   //           responseData['alarms'] != null &&\r\n+//   //           responseData['alarms'].isNotEmpty) {\r\n+//   //         final String alarmTime =\r\n+//   //             responseData['alarms'][0]['time']; // Get the time\r\n+//   //         final List<String> timeParts =\r\n+//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n+\r\n+//   //         final int hour = int.parse(timeParts[0]);\r\n+//   //         final int minute = int.parse(timeParts[1]);\r\n+\r\n+//   //         // Schedule notification using the fetched time\r\n+//   //         _scheduleNotificationAt12(hour, minute);\r\n+//   //       } else {\r\n+//   //         throw Exception(\"No alarms found in the API response.\");\r\n+//   //       }\r\n+//   //     } else {\r\n+//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n+//   //     }\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   @override\r\n+//   void dispose() {\r\n+//     selectNotificationStream.close();\r\n+//     super.dispose();\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt7() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf7(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf7() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   Future<void> _scheduleNotificationAt12() async {\r\n+//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+//         id++,\r\n+//         'शुभ दिन 🙏',\r\n+//         '',\r\n+//         _nextInstanceOf12(),\r\n+//         const NotificationDetails(\r\n+//           android: AndroidNotificationDetails(\r\n+//             'alarm_channel',\r\n+//             'Alarm Notifications',\r\n+//             channelDescription: 'Channel for alarm notifications',\r\n+//             color: Colors.green,\r\n+//             playSound: true,\r\n+//             priority: Priority.max,\r\n+//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+//             importance: Importance.max,\r\n+//             enableVibration: true,\r\n+//             channelShowBadge: true,\r\n+//             icon: '@mipmap/ic_launcher',\r\n+//           ),\r\n+//           iOS: DarwinNotificationDetails(\r\n+//             presentAlert: true,\r\n+//             presentBadge: true,\r\n+//             presentSound: true,\r\n+//             sound: 'sound.wav',\r\n+//           ),\r\n+//         ),\r\n+//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+//         uiLocalNotificationDateInterpretation:\r\n+//             UILocalNotificationDateInterpretation.absoluteTime,\r\n+//         matchDateTimeComponents: DateTimeComponents.time);\r\n+//   }\r\n+\r\n+//   tz.TZDateTime _nextInstanceOf12() {\r\n+//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+//     tz.TZDateTime scheduledDate =\r\n+//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+//     if (scheduledDate.isBefore(now)) {\r\n+//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+//     }\r\n+//     return scheduledDate;\r\n+//   }\r\n+\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return GetMaterialApp(\r\n+//       title: 'Flutter Demo',\r\n+//       debugShowCheckedModeBanner: false,\r\n+//       theme: ThemeData(\r\n+//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+//         useMaterial3: true,\r\n+//       ),\r\n+//       home: const AdoptifySplashscreen(),\r\n+//     );\r\n+//   }\r\n+// }\r\n+import 'dart:async';\r\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n+import 'package:flutter_timezone/flutter_timezone.dart';\r\n+import 'package:get/get.dart';\r\n+import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:templering/screens/adoptify_splash_screen.dart';\r\n+import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/userinfo.dart';\r\n+import 'package:timezone/data/latest_all.dart' as tz;\r\n+import 'package:timezone/timezone.dart' as tz;\r\n+import 'package:http/http.dart' as http;\r\n+\r\n+int id = 0;\r\n+\r\n+final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n+    FlutterLocalNotificationsPlugin();\r\n+\r\n+final StreamController<String?> selectNotificationStream =\r\n+    StreamController<String?>.broadcast();\r\n+\r\n+const MethodChannel platform =\r\n+    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n+\r\n+const String portName = 'notification_send_port';\r\n+\r\n+class ReceivedNotification {\r\n+  ReceivedNotification({\r\n+    required this.id,\r\n+    required this.title,\r\n+    required this.body,\r\n+    required this.payload,\r\n+  });\r\n+\r\n+  final int id;\r\n+  final String? title;\r\n+  final String? body;\r\n+  final String? payload;\r\n+}\r\n+\r\n+String? selectedNotificationPayload;\r\n+\r\n+const String urlLaunchActionId = 'id_1';\r\n+const String navigationActionId = 'id_3';\r\n+const String darwinNotificationCategoryText = 'textCategory';\r\n+const String darwinNotificationCategoryPlain = 'plainCategory';\r\n+\r\n+@pragma('vm:entry-point')\r\n+void notificationTapBackground(NotificationResponse notificationResponse) {\r\n+  print('notification(${notificationResponse.id}) action tapped: '\r\n+      '${notificationResponse.actionId} with'\r\n+      ' payload: ${notificationResponse.payload}');\r\n+  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n+    print(\r\n+        'notification action tapped with input: ${notificationResponse.input}');\r\n+  }\r\n+}\r\n+\r\n+Future<void> _configureLocalTimeZone() async {\r\n+  if (kIsWeb || Platform.isLinux) {\r\n+    return;\r\n+  }\r\n+  tz.initializeTimeZones();\r\n+  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n+  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n+}\r\n+\r\n+Future<void> checkAndRunApi() async {\r\n+  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n+  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n+\r\n+  if (isFirstLaunch) {\r\n+    await prefs.setBool('isFirstLaunch', false);\r\n+\r\n+    try {\r\n+      var request = http.Request(\r\n+          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n+      http.StreamedResponse response = await request.send();\r\n+\r\n+      if (response.statusCode == 200) {\r\n+        print(await response.stream.bytesToString());\r\n+      } else {\r\n+        print('Error: ${response.reasonPhrase}');\r\n+      }\r\n+    } catch (e) {\r\n+      print('API Error: $e');\r\n+    }\r\n+  } else {\r\n+    print('API call skipped, not the first launch.');\r\n+  }\r\n+}\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  final prefs = await SharedPreferences.getInstance();\r\n+  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n+  await _configureLocalTimeZone();\r\n+  await checkAndRunApi();\r\n+  MobileAds.instance.initialize();\r\n+  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n+}\r\n+\r\n+class MyApp extends StatefulWidget {\r\n+  final bool hasSeenUserForm;\r\n+  const MyApp({super.key, required this.hasSeenUserForm});\r\n+  @override\r\n+  State<MyApp> createState() => _MyAppState();\r\n+}\r\n+\r\n+class _MyAppState extends State<MyApp> {\r\n+  bool _notificationsEnabled = false;\r\n+  bool _isLoading = true;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _initApp();\r\n+  }\r\n+\r\n+  Future<void> _initApp() async {\r\n+    await _isAndroidPermissionGranted();\r\n+    await _requestPermissions();\r\n+    await _scheduleNotificationAt12();\r\n+    await _scheduleNotificationAt7();\r\n+\r\n+    setState(() {\r\n+      _isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _isAndroidPermissionGranted() async {\r\n+    if (Platform.isAndroid) {\r\n+      final bool granted = await flutterLocalNotificationsPlugin\r\n+              .resolvePlatformSpecificImplementation<\r\n+                  AndroidFlutterLocalNotificationsPlugin>()\r\n+              ?.areNotificationsEnabled() ??\r\n+          false;\r\n+\r\n+      setState(() {\r\n+        _notificationsEnabled = granted;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _requestPermissions() async {\r\n+    if (Platform.isIOS || Platform.isMacOS) {\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              IOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+      await flutterLocalNotificationsPlugin\r\n+          .resolvePlatformSpecificImplementation<\r\n+              MacOSFlutterLocalNotificationsPlugin>()\r\n+          ?.requestPermissions(\r\n+            alert: true,\r\n+            badge: true,\r\n+            sound: true,\r\n+          );\r\n+    } else if (Platform.isAndroid) {\r\n+      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n+          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n+              AndroidFlutterLocalNotificationsPlugin>();\r\n+\r\n+      final bool? grantedNotificationPermission =\r\n+          await androidImplementation?.requestNotificationsPermission();\r\n+      setState(() {\r\n+        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    selectNotificationStream.close();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt7() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf7(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf7() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  Future<void> _scheduleNotificationAt12() async {\r\n+    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n+        id++,\r\n+        'शुभ दिन 🙏',\r\n+        '',\r\n+        _nextInstanceOf12(),\r\n+        const NotificationDetails(\r\n+          android: AndroidNotificationDetails(\r\n+            'alarm_channel',\r\n+            'Alarm Notifications',\r\n+            channelDescription: 'Channel for alarm notifications',\r\n+            color: Colors.green,\r\n+            playSound: true,\r\n+            priority: Priority.max,\r\n+            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n+            importance: Importance.max,\r\n+            enableVibration: true,\r\n+            channelShowBadge: true,\r\n+            icon: '@mipmap/ic_launcher',\r\n+          ),\r\n+          iOS: DarwinNotificationDetails(\r\n+            presentAlert: true,\r\n+            presentBadge: true,\r\n+            presentSound: true,\r\n+            sound: 'sound.wav',\r\n+          ),\r\n+        ),\r\n+        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n+        uiLocalNotificationDateInterpretation:\r\n+            UILocalNotificationDateInterpretation.absoluteTime,\r\n+        matchDateTimeComponents: DateTimeComponents.time);\r\n+  }\r\n+\r\n+  tz.TZDateTime _nextInstanceOf12() {\r\n+    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n+    tz.TZDateTime scheduledDate =\r\n+        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n+    if (scheduledDate.isBefore(now)) {\r\n+      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n+    }\r\n+    return scheduledDate;\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    if (_isLoading) {\r\n+      return const GetMaterialApp(\r\n+          debugShowCheckedModeBanner: false,\r\n+          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n+    }\r\n+\r\n+    return GetMaterialApp(\r\n+      title: 'Flutter Demo',\r\n+      debugShowCheckedModeBanner: false,\r\n+      theme: ThemeData(\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: widget.hasSeenUserForm\r\n+          // ? const HomeScreen()\r\n+          ? const PlansheetsLogsScreen()\r\n+          : const UserInfoFormScreen(),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746450036089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,8 +447,9 @@\n import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import 'package:templering/screens/adoptify_splash_screen.dart';\r\n import 'package:templering/screens/home.dart';\r\n+import 'package:templering/screens/testing.dart';\r\n import 'package:templering/screens/userinfo.dart';\r\n import 'package:timezone/data/latest_all.dart' as tz;\r\n import 'package:timezone/timezone.dart' as tz;\r\n import 'package:http/http.dart' as http;\r\n@@ -723,1470 +724,9 @@\n         useMaterial3: true,\r\n       ),\r\n       home: widget.hasSeenUserForm\r\n           // ? const HomeScreen()\r\n-          ? const PlansheetsLogsScreen()\r\n+          ?  PlansheetsLogsScreen()\r\n           : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  final prefs = await SharedPreferences.getInstance();\r\n-  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  final bool hasSeenUserForm;\r\n-  const MyApp({super.key, required this.hasSeenUserForm});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const GetMaterialApp(\r\n-          debugShowCheckedModeBanner: false,\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: widget.hasSeenUserForm\r\n-          ? const HomeScreen()\r\n-          ? const HomeScreen()\r\n-          : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n-// import 'dart:async';\r\n-// import 'dart:io';\r\n-\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-// import 'package:flutter_timezone/flutter_timezone.dart';\r\n-// import 'package:get/get.dart';\r\n-// import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-// import 'package:shared_preferences/shared_preferences.dart';\r\n-// import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-// import 'package:timezone/data/latest_all.dart' as tz;\r\n-// import 'package:timezone/timezone.dart' as tz;\r\n-// import 'package:http/http.dart' as http;\r\n-\r\n-// int id = 0;\r\n-\r\n-// final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-//     FlutterLocalNotificationsPlugin();\r\n-\r\n-// final StreamController<String?> selectNotificationStream =\r\n-//     StreamController<String?>.broadcast();\r\n-\r\n-// const MethodChannel platform =\r\n-//     MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-// const String portName = 'notification_send_port';\r\n-\r\n-// class ReceivedNotification {\r\n-//   ReceivedNotification({\r\n-//     required this.id,\r\n-//     required this.title,\r\n-//     required this.body,\r\n-//     required this.payload,\r\n-//   });\r\n-\r\n-//   final int id;\r\n-//   final String? title;\r\n-//   final String? body;\r\n-//   final String? payload;\r\n-// }\r\n-\r\n-// String? selectedNotificationPayload;\r\n-\r\n-// const String urlLaunchActionId = 'id_1';\r\n-// const String navigationActionId = 'id_3';\r\n-// const String darwinNotificationCategoryText = 'textCategory';\r\n-// const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-// @pragma('vm:entry-point')\r\n-// void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-//   // ignore: avoid_print\r\n-//   print('notification(${notificationResponse.id}) action tapped: '\r\n-//       '${notificationResponse.actionId} with'\r\n-//       ' payload: ${notificationResponse.payload}');\r\n-//   if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-//     // ignore: avoid_print\r\n-//     print(\r\n-//         'notification action tapped with input: ${notificationResponse.input}');\r\n-//   }\r\n-// }\r\n-\r\n-// Future<void> _configureLocalTimeZone() async {\r\n-//   if (kIsWeb || Platform.isLinux) {\r\n-//     return;\r\n-//   }\r\n-//   tz.initializeTimeZones();\r\n-//   final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-//   tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-// }\r\n-\r\n-// Future<void> checkAndRunApi() async {\r\n-//   final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-//   final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-//   if (isFirstLaunch) {\r\n-//     // Mark as not the first launch\r\n-//     await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-//     // Run the API\r\n-//     try {\r\n-//       var request = http.Request(\r\n-//           'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-//       http.StreamedResponse response = await request.send();\r\n-\r\n-//       if (response.statusCode == 200) {\r\n-//         print(await response.stream.bytesToString());\r\n-//       } else {\r\n-//         print('Error: ${response.reasonPhrase}');\r\n-//       }\r\n-//     } catch (e) {\r\n-//       print('API Error: $e');\r\n-//     }\r\n-//   } else {\r\n-//     print('API call skipped, not the first launch.');\r\n-//   }\r\n-// }\r\n-\r\n-// void main() async {\r\n-//   WidgetsFlutterBinding.ensureInitialized();\r\n-//   await _configureLocalTimeZone();\r\n-\r\n-//   const AndroidInitializationSettings initializationSettingsAndroid =\r\n-//       AndroidInitializationSettings('@mipmap/ic_launcher');\r\n-\r\n-//   final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n-//       <DarwinNotificationCategory>[\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryText,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.text(\r\n-//           'text_1',\r\n-//           'Action 1',\r\n-//           buttonTitle: 'Send',\r\n-//           placeholder: 'Placeholder',\r\n-//         ),\r\n-//       ],\r\n-//     ),\r\n-//     DarwinNotificationCategory(\r\n-//       darwinNotificationCategoryPlain,\r\n-//       actions: <DarwinNotificationAction>[\r\n-//         DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_2',\r\n-//           'Action 2 (destructive)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.destructive,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           navigationActionId,\r\n-//           'Action 3 (foreground)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.foreground,\r\n-//           },\r\n-//         ),\r\n-//         DarwinNotificationAction.plain(\r\n-//           'id_4',\r\n-//           'Action 4 (auth required)',\r\n-//           options: <DarwinNotificationActionOption>{\r\n-//             DarwinNotificationActionOption.authenticationRequired,\r\n-//           },\r\n-//         ),\r\n-//       ],\r\n-//       options: <DarwinNotificationCategoryOption>{\r\n-//         DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n-//       },\r\n-//     )\r\n-//   ];\r\n-\r\n-//   final DarwinInitializationSettings initializationSettingsDarwin =\r\n-//       DarwinInitializationSettings(\r\n-//     requestAlertPermission: false,\r\n-//     requestBadgePermission: false,\r\n-//     requestSoundPermission: false,\r\n-//     notificationCategories: darwinNotificationCategories,\r\n-//   );\r\n-//   final LinuxInitializationSettings initializationSettingsLinux =\r\n-//       LinuxInitializationSettings(\r\n-//     defaultActionName: 'Open notification',\r\n-//     defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n-//   );\r\n-//   final InitializationSettings initializationSettings = InitializationSettings(\r\n-//     android: initializationSettingsAndroid,\r\n-//     iOS: initializationSettingsDarwin,\r\n-//     macOS: initializationSettingsDarwin,\r\n-//     linux: initializationSettingsLinux,\r\n-//   );\r\n-//   await flutterLocalNotificationsPlugin.initialize(\r\n-//     initializationSettings,\r\n-//     onDidReceiveNotificationResponse:\r\n-//         (NotificationResponse notificationResponse) {\r\n-//       switch (notificationResponse.notificationResponseType) {\r\n-//         case NotificationResponseType.selectedNotification:\r\n-//           selectNotificationStream.add(notificationResponse.payload);\r\n-//           break;\r\n-//         case NotificationResponseType.selectedNotificationAction:\r\n-//           if (notificationResponse.actionId == navigationActionId) {\r\n-//             selectNotificationStream.add(notificationResponse.payload);\r\n-//           }\r\n-//           break;\r\n-//       }\r\n-//     },\r\n-//     onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n-//   );\r\n-//   await checkAndRunApi();\r\n-\r\n-//   MobileAds.instance.initialize();\r\n-//   runApp(const MyApp());\r\n-// }\r\n-\r\n-// class MyApp extends StatefulWidget {\r\n-//   const MyApp({super.key});\r\n-\r\n-//   @override\r\n-//   State<MyApp> createState() => _MyAppState();\r\n-// }\r\n-\r\n-// class _MyAppState extends State<MyApp> {\r\n-//   bool _notificationsEnabled = false;\r\n-\r\n-//   @override\r\n-//   void initState() {\r\n-//     super.initState();\r\n-//     _isAndroidPermissionGranted();\r\n-//     _requestPermissions();\r\n-//     _scheduleNotificationAt12();\r\n-//     _scheduleNotificationAt7();\r\n-//   }\r\n-\r\n-//   Future<void> _isAndroidPermissionGranted() async {\r\n-//     if (Platform.isAndroid) {\r\n-//       final bool granted = await flutterLocalNotificationsPlugin\r\n-//               .resolvePlatformSpecificImplementation<\r\n-//                   AndroidFlutterLocalNotificationsPlugin>()\r\n-//               ?.areNotificationsEnabled() ??\r\n-//           false;\r\n-\r\n-//       setState(() {\r\n-//         _notificationsEnabled = granted;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   Future<void> _requestPermissions() async {\r\n-//     if (Platform.isIOS || Platform.isMacOS) {\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               IOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//       await flutterLocalNotificationsPlugin\r\n-//           .resolvePlatformSpecificImplementation<\r\n-//               MacOSFlutterLocalNotificationsPlugin>()\r\n-//           ?.requestPermissions(\r\n-//             alert: true,\r\n-//             badge: true,\r\n-//             sound: true,\r\n-//           );\r\n-//     } else if (Platform.isAndroid) {\r\n-//       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-//           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-//               AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-//       final bool? grantedNotificationPermission =\r\n-//           await androidImplementation?.requestNotificationsPermission();\r\n-//       setState(() {\r\n-//         _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-//       });\r\n-//     }\r\n-//   }\r\n-\r\n-//   // Future<void> _cancelAllNotifications() async {\r\n-//   //   await flutterLocalNotificationsPlugin.cancelAll();\r\n-//   // }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n-//   // try {\r\n-//   //   var request = http.Request('GET',\r\n-//   //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //   http.StreamedResponse response = await request.send();\r\n-\r\n-//   //   if (response.statusCode == 200) {\r\n-//   //     // Parse the response\r\n-//   //     final String responseBody = await response.stream.bytesToString();\r\n-//   //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //     if (responseData['success'] == true &&\r\n-//   //         responseData['alarms'] != null &&\r\n-//   //         responseData['alarms'].isNotEmpty) {\r\n-//   //       final String alarmTime =\r\n-//   //           responseData['alarms'][0]['time']; // Get the time\r\n-//   //       final List<String> timeParts =\r\n-//   //           alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //       final int hour = int.parse(timeParts[0]);\r\n-//   //       final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //       // Schedule notification using the fetched time\r\n-//   //      _scheduleNotificationAt();\r\n-//   //     } else {\r\n-//   //       throw Exception(\"No alarms found in the API response.\");\r\n-//   //     }\r\n-//   //   } else {\r\n-//   //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //   }\r\n-//   // } catch (e) {\r\n-//   //   print(\"Error fetching or scheduling alarm: $e\");\r\n-//   // }\r\n-// //  }\r\n-\r\n-//   // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n-//   //   try {\r\n-//   //     var request = http.Request('GET',\r\n-//   //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n-\r\n-//   //     http.StreamedResponse response = await request.send();\r\n-\r\n-//   //     if (response.statusCode == 200) {\r\n-//   //       // Parse the response\r\n-//   //       final String responseBody = await response.stream.bytesToString();\r\n-//   //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n-\r\n-//   //       if (responseData['success'] == true &&\r\n-//   //           responseData['alarms'] != null &&\r\n-//   //           responseData['alarms'].isNotEmpty) {\r\n-//   //         final String alarmTime =\r\n-//   //             responseData['alarms'][0]['time']; // Get the time\r\n-//   //         final List<String> timeParts =\r\n-//   //             alarmTime.split(':'); // Split time into hours and minutes\r\n-\r\n-//   //         final int hour = int.parse(timeParts[0]);\r\n-//   //         final int minute = int.parse(timeParts[1]);\r\n-\r\n-//   //         // Schedule notification using the fetched time\r\n-//   //         _scheduleNotificationAt12(hour, minute);\r\n-//   //       } else {\r\n-//   //         throw Exception(\"No alarms found in the API response.\");\r\n-//   //       }\r\n-//   //     } else {\r\n-//   //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n-//   //     }\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error fetching or scheduling alarm: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   @override\r\n-//   void dispose() {\r\n-//     selectNotificationStream.close();\r\n-//     super.dispose();\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt7() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf7(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf7() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   Future<void> _scheduleNotificationAt12() async {\r\n-//     await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-//         id++,\r\n-//         'शुभ दिन 🙏',\r\n-//         '',\r\n-//         _nextInstanceOf12(),\r\n-//         const NotificationDetails(\r\n-//           android: AndroidNotificationDetails(\r\n-//             'alarm_channel',\r\n-//             'Alarm Notifications',\r\n-//             channelDescription: 'Channel for alarm notifications',\r\n-//             color: Colors.green,\r\n-//             playSound: true,\r\n-//             priority: Priority.max,\r\n-//             sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-//             importance: Importance.max,\r\n-//             enableVibration: true,\r\n-//             channelShowBadge: true,\r\n-//             icon: '@mipmap/ic_launcher',\r\n-//           ),\r\n-//           iOS: DarwinNotificationDetails(\r\n-//             presentAlert: true,\r\n-//             presentBadge: true,\r\n-//             presentSound: true,\r\n-//             sound: 'sound.wav',\r\n-//           ),\r\n-//         ),\r\n-//         androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-//         uiLocalNotificationDateInterpretation:\r\n-//             UILocalNotificationDateInterpretation.absoluteTime,\r\n-//         matchDateTimeComponents: DateTimeComponents.time);\r\n-//   }\r\n-\r\n-//   tz.TZDateTime _nextInstanceOf12() {\r\n-//     final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-//     tz.TZDateTime scheduledDate =\r\n-//         tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-//     if (scheduledDate.isBefore(now)) {\r\n-//       scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-//     }\r\n-//     return scheduledDate;\r\n-//   }\r\n-\r\n-//   @override\r\n-//   Widget build(BuildContext context) {\r\n-//     return GetMaterialApp(\r\n-//       title: 'Flutter Demo',\r\n-//       debugShowCheckedModeBanner: false,\r\n-//       theme: ThemeData(\r\n-//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-//         useMaterial3: true,\r\n-//       ),\r\n-//       home: const AdoptifySplashscreen(),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:async';\r\n-import 'dart:io';\r\n-\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\n-import 'package:flutter_timezone/flutter_timezone.dart';\r\n-import 'package:get/get.dart';\r\n-import 'package:google_mobile_ads/google_mobile_ads.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-import 'package:templering/screens/adoptify_splash_screen.dart';\r\n-import 'package:templering/screens/home.dart';\r\n-import 'package:templering/screens/userinfo.dart';\r\n-import 'package:timezone/data/latest_all.dart' as tz;\r\n-import 'package:timezone/timezone.dart' as tz;\r\n-import 'package:http/http.dart' as http;\r\n-\r\n-int id = 0;\r\n-\r\n-final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n-    FlutterLocalNotificationsPlugin();\r\n-\r\n-final StreamController<String?> selectNotificationStream =\r\n-    StreamController<String?>.broadcast();\r\n-\r\n-const MethodChannel platform =\r\n-    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n-\r\n-const String portName = 'notification_send_port';\r\n-\r\n-class ReceivedNotification {\r\n-  ReceivedNotification({\r\n-    required this.id,\r\n-    required this.title,\r\n-    required this.body,\r\n-    required this.payload,\r\n-  });\r\n-\r\n-  final int id;\r\n-  final String? title;\r\n-  final String? body;\r\n-  final String? payload;\r\n-}\r\n-\r\n-String? selectedNotificationPayload;\r\n-\r\n-const String urlLaunchActionId = 'id_1';\r\n-const String navigationActionId = 'id_3';\r\n-const String darwinNotificationCategoryText = 'textCategory';\r\n-const String darwinNotificationCategoryPlain = 'plainCategory';\r\n-\r\n-@pragma('vm:entry-point')\r\n-void notificationTapBackground(NotificationResponse notificationResponse) {\r\n-  print('notification(${notificationResponse.id}) action tapped: '\r\n-      '${notificationResponse.actionId} with'\r\n-      ' payload: ${notificationResponse.payload}');\r\n-  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n-    print(\r\n-        'notification action tapped with input: ${notificationResponse.input}');\r\n-  }\r\n-}\r\n-\r\n-Future<void> _configureLocalTimeZone() async {\r\n-  if (kIsWeb || Platform.isLinux) {\r\n-    return;\r\n-  }\r\n-  tz.initializeTimeZones();\r\n-  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n-  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n-}\r\n-\r\n-Future<void> checkAndRunApi() async {\r\n-  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n-  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n-\r\n-  if (isFirstLaunch) {\r\n-    await prefs.setBool('isFirstLaunch', false);\r\n-\r\n-    try {\r\n-      var request = http.Request(\r\n-          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n-      http.StreamedResponse response = await request.send();\r\n-\r\n-      if (response.statusCode == 200) {\r\n-        print(await response.stream.bytesToString());\r\n-      } else {\r\n-        print('Error: ${response.reasonPhrase}');\r\n-      }\r\n-    } catch (e) {\r\n-      print('API Error: $e');\r\n-    }\r\n-  } else {\r\n-    print('API call skipped, not the first launch.');\r\n-  }\r\n-}\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  final prefs = await SharedPreferences.getInstance();\r\n-  final hasSeenUserForm = prefs.getBool('hasSeenUserForm') ?? false;\r\n-  await _configureLocalTimeZone();\r\n-  await checkAndRunApi();\r\n-  MobileAds.instance.initialize();\r\n-  runApp(MyApp(hasSeenUserForm: hasSeenUserForm));\r\n-}\r\n-\r\n-class MyApp extends StatefulWidget {\r\n-  final bool hasSeenUserForm;\r\n-  const MyApp({super.key, required this.hasSeenUserForm});\r\n-  @override\r\n-  State<MyApp> createState() => _MyAppState();\r\n-}\r\n-\r\n-class _MyAppState extends State<MyApp> {\r\n-  bool _notificationsEnabled = false;\r\n-  bool _isLoading = true;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _initApp();\r\n-  }\r\n-\r\n-  Future<void> _initApp() async {\r\n-    await _isAndroidPermissionGranted();\r\n-    await _requestPermissions();\r\n-    await _scheduleNotificationAt12();\r\n-    await _scheduleNotificationAt7();\r\n-\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _isAndroidPermissionGranted() async {\r\n-    if (Platform.isAndroid) {\r\n-      final bool granted = await flutterLocalNotificationsPlugin\r\n-              .resolvePlatformSpecificImplementation<\r\n-                  AndroidFlutterLocalNotificationsPlugin>()\r\n-              ?.areNotificationsEnabled() ??\r\n-          false;\r\n-\r\n-      setState(() {\r\n-        _notificationsEnabled = granted;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _requestPermissions() async {\r\n-    if (Platform.isIOS || Platform.isMacOS) {\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              IOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-      await flutterLocalNotificationsPlugin\r\n-          .resolvePlatformSpecificImplementation<\r\n-              MacOSFlutterLocalNotificationsPlugin>()\r\n-          ?.requestPermissions(\r\n-            alert: true,\r\n-            badge: true,\r\n-            sound: true,\r\n-          );\r\n-    } else if (Platform.isAndroid) {\r\n-      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n-          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n-              AndroidFlutterLocalNotificationsPlugin>();\r\n-\r\n-      final bool? grantedNotificationPermission =\r\n-          await androidImplementation?.requestNotificationsPermission();\r\n-      setState(() {\r\n-        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    selectNotificationStream.close();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt7() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf7(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf7() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  Future<void> _scheduleNotificationAt12() async {\r\n-    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n-        id++,\r\n-        'शुभ दिन 🙏',\r\n-        '',\r\n-        _nextInstanceOf12(),\r\n-        const NotificationDetails(\r\n-          android: AndroidNotificationDetails(\r\n-            'alarm_channel',\r\n-            'Alarm Notifications',\r\n-            channelDescription: 'Channel for alarm notifications',\r\n-            color: Colors.green,\r\n-            playSound: true,\r\n-            priority: Priority.max,\r\n-            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n-            importance: Importance.max,\r\n-            enableVibration: true,\r\n-            channelShowBadge: true,\r\n-            icon: '@mipmap/ic_launcher',\r\n-          ),\r\n-          iOS: DarwinNotificationDetails(\r\n-            presentAlert: true,\r\n-            presentBadge: true,\r\n-            presentSound: true,\r\n-            sound: 'sound.wav',\r\n-          ),\r\n-        ),\r\n-        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n-        uiLocalNotificationDateInterpretation:\r\n-            UILocalNotificationDateInterpretation.absoluteTime,\r\n-        matchDateTimeComponents: DateTimeComponents.time);\r\n-  }\r\n-\r\n-  tz.TZDateTime _nextInstanceOf12() {\r\n-    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n-    tz.TZDateTime scheduledDate =\r\n-        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n-    if (scheduledDate.isBefore(now)) {\r\n-      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n-    }\r\n-    return scheduledDate;\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    if (_isLoading) {\r\n-      return const GetMaterialApp(\r\n-          debugShowCheckedModeBanner: false,\r\n-          home: Scaffold(body: Center(child: CircularProgressIndicator())));\r\n-    }\r\n-\r\n-    return GetMaterialApp(\r\n-      title: 'Flutter Demo',\r\n-      debugShowCheckedModeBanner: false,\r\n-      theme: ThemeData(\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: widget.hasSeenUserForm\r\n-          ? const PlansheetsLogsScreen()\r\n-          : const UserInfoFormScreen(),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746450686241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -724,9 +724,9 @@\n         useMaterial3: true,\r\n       ),\r\n       home: widget.hasSeenUserForm\r\n           // ? const HomeScreen()\r\n-          ?  PlansheetsLogsScreen()\r\n+          ?  PlansheetLogsScreen()\r\n           : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746451966513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -724,9 +724,9 @@\n         useMaterial3: true,\r\n       ),\r\n       home: widget.hasSeenUserForm\r\n           // ? const HomeScreen()\r\n-          ? PlansheetLogsScreen()\r\n+          ? PlanDetailsScreen()\r\n           : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1746452043076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -724,9 +724,9 @@\n         useMaterial3: true,\r\n       ),\r\n       home: widget.hasSeenUserForm\r\n           // ? const HomeScreen()\r\n-          ? PlanDetailsScreen()\r\n+          ? PlansheetLogsScreen()\r\n           : const UserInfoFormScreen(),\r\n     );\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1746441059971,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\nimport 'dart:io';\r\n\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\r\nimport 'package:flutter_timezone/flutter_timezone.dart';\r\nimport 'package:get/get.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport 'package:templering/screens/adoptify_splash_screen.dart';\r\nimport 'package:timezone/data/latest_all.dart' as tz;\r\nimport 'package:timezone/timezone.dart' as tz;\r\nimport 'package:http/http.dart' as http;\r\n\r\nint id = 0;\r\n\r\nfinal FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\r\n    FlutterLocalNotificationsPlugin();\r\n\r\nfinal StreamController<String?> selectNotificationStream =\r\n    StreamController<String?>.broadcast();\r\n\r\nconst MethodChannel platform =\r\n    MethodChannel('dexterx.dev/flutter_local_notifications_example');\r\n\r\nconst String portName = 'notification_send_port';\r\n\r\nclass ReceivedNotification {\r\n  ReceivedNotification({\r\n    required this.id,\r\n    required this.title,\r\n    required this.body,\r\n    required this.payload,\r\n  });\r\n\r\n  final int id;\r\n  final String? title;\r\n  final String? body;\r\n  final String? payload;\r\n}\r\n\r\nString? selectedNotificationPayload;\r\n\r\nconst String urlLaunchActionId = 'id_1';\r\nconst String navigationActionId = 'id_3';\r\nconst String darwinNotificationCategoryText = 'textCategory';\r\nconst String darwinNotificationCategoryPlain = 'plainCategory';\r\n\r\n@pragma('vm:entry-point')\r\nvoid notificationTapBackground(NotificationResponse notificationResponse) {\r\n  // ignore: avoid_print\r\n  print('notification(${notificationResponse.id}) action tapped: '\r\n      '${notificationResponse.actionId} with'\r\n      ' payload: ${notificationResponse.payload}');\r\n  if (notificationResponse.input?.isNotEmpty ?? false) {\r\n    // ignore: avoid_print\r\n    print(\r\n        'notification action tapped with input: ${notificationResponse.input}');\r\n  }\r\n}\r\n\r\nFuture<void> _configureLocalTimeZone() async {\r\n  if (kIsWeb || Platform.isLinux) {\r\n    return;\r\n  }\r\n  tz.initializeTimeZones();\r\n  final String? timeZoneName = await FlutterTimezone.getLocalTimezone();\r\n  tz.setLocalLocation(tz.getLocation(timeZoneName!));\r\n}\r\n\r\nFuture<void> checkAndRunApi() async {\r\n  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  final bool isFirstLaunch = prefs.getBool('isFirstLaunch') ?? true;\r\n\r\n  if (isFirstLaunch) {\r\n    // Mark as not the first launch\r\n    await prefs.setBool('isFirstLaunch', false);\r\n\r\n    // Run the API\r\n    try {\r\n      var request = http.Request(\r\n          'GET', Uri.parse('https://alarmclock.rukmanimfg.com/api/users'));\r\n      http.StreamedResponse response = await request.send();\r\n\r\n      if (response.statusCode == 200) {\r\n        print(await response.stream.bytesToString());\r\n      } else {\r\n        print('Error: ${response.reasonPhrase}');\r\n      }\r\n    } catch (e) {\r\n      print('API Error: $e');\r\n    }\r\n  } else {\r\n    print('API call skipped, not the first launch.');\r\n  }\r\n}\r\n\r\nvoid main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  await _configureLocalTimeZone();\r\n\r\n  const AndroidInitializationSettings initializationSettingsAndroid =\r\n      AndroidInitializationSettings('@mipmap/ic_launcher');\r\n\r\n  final List<DarwinNotificationCategory> darwinNotificationCategories =\r\n      <DarwinNotificationCategory>[\r\n    DarwinNotificationCategory(\r\n      darwinNotificationCategoryText,\r\n      actions: <DarwinNotificationAction>[\r\n        DarwinNotificationAction.text(\r\n          'text_1',\r\n          'Action 1',\r\n          buttonTitle: 'Send',\r\n          placeholder: 'Placeholder',\r\n        ),\r\n      ],\r\n    ),\r\n    DarwinNotificationCategory(\r\n      darwinNotificationCategoryPlain,\r\n      actions: <DarwinNotificationAction>[\r\n        DarwinNotificationAction.plain('id_1', 'Action 1'),\r\n        DarwinNotificationAction.plain(\r\n          'id_2',\r\n          'Action 2 (destructive)',\r\n          options: <DarwinNotificationActionOption>{\r\n            DarwinNotificationActionOption.destructive,\r\n          },\r\n        ),\r\n        DarwinNotificationAction.plain(\r\n          navigationActionId,\r\n          'Action 3 (foreground)',\r\n          options: <DarwinNotificationActionOption>{\r\n            DarwinNotificationActionOption.foreground,\r\n          },\r\n        ),\r\n        DarwinNotificationAction.plain(\r\n          'id_4',\r\n          'Action 4 (auth required)',\r\n          options: <DarwinNotificationActionOption>{\r\n            DarwinNotificationActionOption.authenticationRequired,\r\n          },\r\n        ),\r\n      ],\r\n      options: <DarwinNotificationCategoryOption>{\r\n        DarwinNotificationCategoryOption.hiddenPreviewShowTitle,\r\n      },\r\n    )\r\n  ];\r\n\r\n  final DarwinInitializationSettings initializationSettingsDarwin =\r\n      DarwinInitializationSettings(\r\n    requestAlertPermission: false,\r\n    requestBadgePermission: false,\r\n    requestSoundPermission: false,\r\n    notificationCategories: darwinNotificationCategories,\r\n  );\r\n  final LinuxInitializationSettings initializationSettingsLinux =\r\n      LinuxInitializationSettings(\r\n    defaultActionName: 'Open notification',\r\n    defaultIcon: AssetsLinuxIcon('icons/app_icon.png'),\r\n  );\r\n  final InitializationSettings initializationSettings = InitializationSettings(\r\n    android: initializationSettingsAndroid,\r\n    iOS: initializationSettingsDarwin,\r\n    macOS: initializationSettingsDarwin,\r\n    linux: initializationSettingsLinux,\r\n  );\r\n  await flutterLocalNotificationsPlugin.initialize(\r\n    initializationSettings,\r\n    onDidReceiveNotificationResponse:\r\n        (NotificationResponse notificationResponse) {\r\n      switch (notificationResponse.notificationResponseType) {\r\n        case NotificationResponseType.selectedNotification:\r\n          selectNotificationStream.add(notificationResponse.payload);\r\n          break;\r\n        case NotificationResponseType.selectedNotificationAction:\r\n          if (notificationResponse.actionId == navigationActionId) {\r\n            selectNotificationStream.add(notificationResponse.payload);\r\n          }\r\n          break;\r\n      }\r\n    },\r\n    onDidReceiveBackgroundNotificationResponse: notificationTapBackground,\r\n  );\r\n  await checkAndRunApi();\r\n  MobileAds.instance.initialize();\r\n\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatefulWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  State<MyApp> createState() => _MyAppState();\r\n}\r\n\r\nclass _MyAppState extends State<MyApp> {\r\n  bool _notificationsEnabled = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _isAndroidPermissionGranted();\r\n    _requestPermissions();\r\n    _scheduleNotificationAt12();\r\n    _scheduleNotificationAt7();\r\n  }\r\n\r\n  Future<void> _isAndroidPermissionGranted() async {\r\n    if (Platform.isAndroid) {\r\n      final bool granted = await flutterLocalNotificationsPlugin\r\n              .resolvePlatformSpecificImplementation<\r\n                  AndroidFlutterLocalNotificationsPlugin>()\r\n              ?.areNotificationsEnabled() ??\r\n          false;\r\n\r\n      setState(() {\r\n        _notificationsEnabled = granted;\r\n      });\r\n    }\r\n  }\r\n\r\n  Future<void> _requestPermissions() async {\r\n    if (Platform.isIOS || Platform.isMacOS) {\r\n      await flutterLocalNotificationsPlugin\r\n          .resolvePlatformSpecificImplementation<\r\n              IOSFlutterLocalNotificationsPlugin>()\r\n          ?.requestPermissions(\r\n            alert: true,\r\n            badge: true,\r\n            sound: true,\r\n          );\r\n      await flutterLocalNotificationsPlugin\r\n          .resolvePlatformSpecificImplementation<\r\n              MacOSFlutterLocalNotificationsPlugin>()\r\n          ?.requestPermissions(\r\n            alert: true,\r\n            badge: true,\r\n            sound: true,\r\n          );\r\n    } else if (Platform.isAndroid) {\r\n      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =\r\n          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<\r\n              AndroidFlutterLocalNotificationsPlugin>();\r\n\r\n      final bool? grantedNotificationPermission =\r\n          await androidImplementation?.requestNotificationsPermission();\r\n      setState(() {\r\n        _notificationsEnabled = grantedNotificationPermission ?? false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Future<void> _cancelAllNotifications() async {\r\n  //   await flutterLocalNotificationsPlugin.cancelAll();\r\n  // }\r\n\r\n  // Future<void> _fetchAlarmTimeAndScheduleNotification12() async {\r\n  // try {\r\n  //   var request = http.Request('GET',\r\n  //       Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n\r\n  //   http.StreamedResponse response = await request.send();\r\n\r\n  //   if (response.statusCode == 200) {\r\n  //     // Parse the response\r\n  //     final String responseBody = await response.stream.bytesToString();\r\n  //     final Map<String, dynamic> responseData = json.decode(responseBody);\r\n\r\n  //     if (responseData['success'] == true &&\r\n  //         responseData['alarms'] != null &&\r\n  //         responseData['alarms'].isNotEmpty) {\r\n  //       final String alarmTime =\r\n  //           responseData['alarms'][0]['time']; // Get the time\r\n  //       final List<String> timeParts =\r\n  //           alarmTime.split(':'); // Split time into hours and minutes\r\n\r\n  //       final int hour = int.parse(timeParts[0]);\r\n  //       final int minute = int.parse(timeParts[1]);\r\n\r\n  //       // Schedule notification using the fetched time\r\n  //      _scheduleNotificationAt();\r\n  //     } else {\r\n  //       throw Exception(\"No alarms found in the API response.\");\r\n  //     }\r\n  //   } else {\r\n  //     throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n  //   }\r\n  // } catch (e) {\r\n  //   print(\"Error fetching or scheduling alarm: $e\");\r\n  // }\r\n//  }\r\n\r\n  // Future<void> _fetchAlarmTimeAndScheduleNotification12PM() async {\r\n  //   try {\r\n  //     var request = http.Request('GET',\r\n  //         Uri.parse('https://alarmclock.rukmanimfg.com/api/getsetalarm'));\r\n\r\n  //     http.StreamedResponse response = await request.send();\r\n\r\n  //     if (response.statusCode == 200) {\r\n  //       // Parse the response\r\n  //       final String responseBody = await response.stream.bytesToString();\r\n  //       final Map<String, dynamic> responseData = json.decode(responseBody);\r\n\r\n  //       if (responseData['success'] == true &&\r\n  //           responseData['alarms'] != null &&\r\n  //           responseData['alarms'].isNotEmpty) {\r\n  //         final String alarmTime =\r\n  //             responseData['alarms'][0]['time']; // Get the time\r\n  //         final List<String> timeParts =\r\n  //             alarmTime.split(':'); // Split time into hours and minutes\r\n\r\n  //         final int hour = int.parse(timeParts[0]);\r\n  //         final int minute = int.parse(timeParts[1]);\r\n\r\n  //         // Schedule notification using the fetched time\r\n  //         _scheduleNotificationAt12(hour, minute);\r\n  //       } else {\r\n  //         throw Exception(\"No alarms found in the API response.\");\r\n  //       }\r\n  //     } else {\r\n  //       throw Exception(\"Failed to fetch alarm time: ${response.reasonPhrase}\");\r\n  //     }\r\n  //   } catch (e) {\r\n  //     print(\"Error fetching or scheduling alarm: $e\");\r\n  //   }\r\n  // }\r\n\r\n  @override\r\n  void dispose() {\r\n    selectNotificationStream.close();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _scheduleNotificationAt7() async {\r\n    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n        id++,\r\n        'शुभ दिन 🙏',\r\n        '',\r\n        _nextInstanceOf7(),\r\n        const NotificationDetails(\r\n          android: AndroidNotificationDetails(\r\n            'alarm_channel',\r\n            'Alarm Notifications',\r\n            channelDescription: 'Channel for alarm notifications',\r\n            color: Colors.green,\r\n            playSound: true,\r\n            priority: Priority.max,\r\n            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n            importance: Importance.max,\r\n            enableVibration: true,\r\n            channelShowBadge: true,\r\n            icon: '@mipmap/ic_launcher',\r\n          ),\r\n          iOS: DarwinNotificationDetails(\r\n            presentAlert: true,\r\n            presentBadge: true,\r\n            presentSound: true,\r\n            sound: 'sound.wav',\r\n          ),\r\n        ),\r\n        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n        uiLocalNotificationDateInterpretation:\r\n            UILocalNotificationDateInterpretation.absoluteTime,\r\n        matchDateTimeComponents: DateTimeComponents.time);\r\n  }\r\n\r\n  tz.TZDateTime _nextInstanceOf7() {\r\n    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n    tz.TZDateTime scheduledDate =\r\n        tz.TZDateTime(tz.local, now.year, now.month, now.day, 19, 00);\r\n    if (scheduledDate.isBefore(now)) {\r\n      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n    }\r\n    return scheduledDate;\r\n  }\r\n\r\n  Future<void> _scheduleNotificationAt12() async {\r\n    await flutterLocalNotificationsPlugin.zonedSchedule(\r\n        id++,\r\n        'शुभ दिन 🙏',\r\n        '',\r\n        _nextInstanceOf12(),\r\n        const NotificationDetails(\r\n          android: AndroidNotificationDetails(\r\n            'alarm_channel',\r\n            'Alarm Notifications',\r\n            channelDescription: 'Channel for alarm notifications',\r\n            color: Colors.green,\r\n            playSound: true,\r\n            priority: Priority.max,\r\n            sound: RawResourceAndroidNotificationSound('slow_spring_board'),\r\n            importance: Importance.max,\r\n            enableVibration: true,\r\n            channelShowBadge: true,\r\n            icon: '@mipmap/ic_launcher',\r\n          ),\r\n          iOS: DarwinNotificationDetails(\r\n            presentAlert: true,\r\n            presentBadge: true,\r\n            presentSound: true,\r\n            sound: 'sound.wav',\r\n          ),\r\n        ),\r\n        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,\r\n        uiLocalNotificationDateInterpretation:\r\n            UILocalNotificationDateInterpretation.absoluteTime,\r\n        matchDateTimeComponents: DateTimeComponents.time);\r\n  }\r\n\r\n  tz.TZDateTime _nextInstanceOf12() {\r\n    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);\r\n    tz.TZDateTime scheduledDate =\r\n        tz.TZDateTime(tz.local, now.year, now.month, now.day, 12, 00);\r\n    if (scheduledDate.isBefore(now)) {\r\n      scheduledDate = scheduledDate.add(const Duration(days: 1));\r\n    }\r\n    return scheduledDate;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GetMaterialApp(\r\n      title: 'Flutter Demo',\r\n      debugShowCheckedModeBanner: false,\r\n      theme: ThemeData(\r\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n        useMaterial3: true,\r\n      ),\r\n      home: const AdoptifySplashscreen(),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}